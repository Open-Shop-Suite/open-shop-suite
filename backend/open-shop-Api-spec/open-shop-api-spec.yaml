openapi: 3.1.0

info:
  title: Open Shop API
  description: E-commerce platform API for Open Shop application
  version: 1.0.0
  contact:
    name: Open Shop API Support
    email: api-support@openshop.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.openshop.com/v1
    description: Production server
  - url: https://staging-api.openshop.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Local development server

tags:
  - name: Authentication
    description: Customer authentication operations including signup, login, and password management
  - name: OAuth Authentication
    description: OAuth-based authentication operations for social login providers (Google, Facebook, LinkedIn)
  - name: Token Management
    description: JWT token operations including refresh, logout, and session management
  - name: Email Verification
    description: Email verification operations for account activation and security
  - name: Customer Profile
    description: Customer profile management operations for account information updates
  - name: Product Catalog
    description: Product and category management operations including listing, searching, and filtering
  - name: Shopping Cart
    description: Shopping cart operations for adding, updating, and managing cart items
  - name: Order Management
    description: Order lifecycle operations including creation, tracking, and cancellation (excluding payment processing)
  - name: Product Reviews
    description: Product review and rating operations for customer feedback management
  - name: Wishlist
    description: Customer wishlist operations for saving and managing desired products
  - name: Admin - Inventory Management
    description: Admin operations for managing product inventory, stock levels, and audit trails
  - name: Admin - Order Management
    description: Admin operations for viewing and managing all customer orders
  - name: Admin - Sales Analytics
    description: Admin operations for sales reports, analytics, and business intelligence
  - name: Admin - Customer Management
    description: Admin operations for managing customer accounts and profiles
  - name: Admin - Product Management
    description: Admin operations for creating, updating, and managing product catalog

security:
  - bearerAuth: []
  - apiKeyAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Sign up a new customer account
      description: |
        Create a new customer account with email and password and return authentication tokens.
        User is immediately authenticated after successful signup.
        Password must be hashed client-side before sending.
        Email verification required for full account activation.

        Rate limited to 5 attempts per minute per IP address.
      operationId: registerCustomer
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              basic_registration:
                $ref: '#/components/examples/auth_register_request'
      responses:
        '201':
          description: Customer signed up successfully and authenticated, email verification required
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
              examples:
                successful_registration:
                  $ref: '#/components/examples/auth_register_response'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login with email/password or OAuth
      description: |
        Authenticate customer using either:
        - Email and hashed password
        - OAuth provider (Google, Facebook, LinkedIn)

        Returns JWT access and refresh tokens on successful authentication.

        Rate limited to 10 attempts per minute per IP address.
      operationId: loginCustomer
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              email_password_login:
                $ref: '#/components/examples/auth_login_request'
              oauth_login:
                $ref: '#/components/examples/auth_oauth_request'
      responses:
        '200':
          description: Login successful
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                successful_login:
                  $ref: '#/components/examples/auth_login_response'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/password/forgot:
    post:
      tags:
        - Authentication
      summary: Initiate password reset
      description: |
        Send password reset email to customer.
        Email contains secure token for password reset confirmation.

        Rate limited to 3 attempts per hour per email address.
      operationId: forgotPassword
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
            examples:
              password_reset_request:
                $ref: '#/components/examples/auth_password_forgot_request'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'

  /auth/password/reset:
    post:
      tags:
        - Authentication
      summary: Complete password reset
      description: |
        Complete password reset using token from email and new hashed password.
        Invalidates all existing sessions for the customer.

        Rate limited to 5 attempts per hour per token.
      operationId: resetPassword
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordConfirmRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # OAuth Authentication Endpoints
  /auth/oauth/register:
    post:
      tags:
        - OAuth Authentication
      summary: Sign up with OAuth provider
      description: |
        Create a new customer account using OAuth provider (Google, Facebook, LinkedIn).
        OAuth token is validated with the provider and customer profile is created automatically.
        User is immediately authenticated after successful OAuth signup.
        No email verification required for OAuth registrations.

        Rate limited to 10 attempts per minute per IP address.
      operationId: registerCustomerOAuth
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRegisterRequest'
            examples:
              google_oauth_signup:
                $ref: '#/components/examples/auth_oauth_request'
      responses:
        '201':
          description: Customer signed up successfully via OAuth and authenticated
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '401':
          description: Invalid OAuth token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_oauth_token:
                  summary: Invalid OAuth token
                  value:
                    error: INVALID_OAUTH_TOKEN
                    message: The provided OAuth token is invalid or expired
                    timestamp: "2024-01-15T10:30:00Z"
        '409':
          description: Account already exists with this email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                account_exists:
                  summary: Account already exists
                  value:
                    error: ACCOUNT_EXISTS
                    message: An account already exists with this email address. Please use login instead.
                    timestamp: "2024-01-15T10:30:00Z"

  # Token Management Endpoints
  /auth/token/refresh:
    post:
      tags:
        - Token Management
      summary: Refresh JWT access token
      description: |
        Refresh expired JWT access token using valid refresh token.
        Returns new access and refresh tokens (token rotation).

        Rate limited to 20 attempts per minute per user.
      operationId: refreshToken
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_refresh_token:
                  summary: Invalid refresh token
                  value:
                    error: INVALID_REFRESH_TOKEN
                    message: Refresh token is invalid, expired, or has been revoked
                    timestamp: "2024-01-15T10:30:00Z"

  /auth/logout:
    post:
      tags:
        - Token Management
      summary: Logout and invalidate tokens
      description: |
        Securely logout customer by invalidating JWT access and refresh tokens.
        All active sessions for the customer will be terminated.

        Requires valid JWT Bearer token in Authorization header.
      operationId: logoutCustomer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Email Verification Endpoints
  /auth/email/verify:
    post:
      tags:
        - Email Verification
      summary: Verify email address
      description: |
        Verify customer's email address using verification token sent via email.
        Activates the customer account for login.

        Rate limited to 10 attempts per hour per token.
      operationId: verifyEmail
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerificationRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailVerifiedResponse'
        '401':
          description: Invalid or expired verification token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_verification_token:
                  summary: Invalid verification token
                  value:
                    error: INVALID_VERIFICATION_TOKEN
                    message: Verification token is invalid or has expired
                    timestamp: "2024-01-15T10:30:00Z"
        '409':
          description: Email already verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                email_already_verified:
                  summary: Email already verified
                  value:
                    error: EMAIL_ALREADY_VERIFIED
                    message: This email address has already been verified
                    timestamp: "2024-01-15T10:30:00Z"

  /auth/email/send-verification:
    post:
      tags:
        - Email Verification
      summary: Resend email verification
      description: |
        Resend email verification token to customer's email address.
        Only works for unverified accounts.

        Rate limited to 3 attempts per hour per email address.
      operationId: sendEmailVerification
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailResendRequest'
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSentResponse'
        '404':
          description: Customer account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                account_not_found:
                  summary: Account not found
                  value:
                    error: ACCOUNT_NOT_FOUND
                    message: No account found with this email address
                    timestamp: "2024-01-15T10:30:00Z"
        '409':
          description: Email already verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                email_already_verified:
                  summary: Email already verified
                  value:
                    error: EMAIL_ALREADY_VERIFIED
                    message: This email address has already been verified
                    timestamp: "2024-01-15T10:30:00Z"

  # Customer Profile Endpoints
  /profile:
    get:
      tags:
        - Customer Profile
      summary: Get customer profile
      description: |
        Retrieve the authenticated customer's profile information.
        Includes personal details and linked OAuth providers.

        Requires valid JWT Bearer token in Authorization header.
      operationId: getCustomerProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Customer profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/Unauthorized'

    patch:
      tags:
        - Customer Profile
      summary: Update customer profile
      description: |
        Update specific fields in the customer's profile.
        Only provided fields will be updated (partial update).
        Email changes require re-verification.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 10 updates per hour per user.
      operationId: updateCustomerProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
            examples:
              profile_update:
                $ref: '#/components/examples/customer_profile_update'
      responses:
        '200':
          description: Profile updated successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileUpdateResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Email already in use by another account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                email_already_exists:
                  summary: Email already exists
                  value:
                    error: EMAIL_ALREADY_EXISTS
                    message: This email address is already associated with another account
                    timestamp: "2024-01-15T10:30:00Z"

  # Customer Address Management Endpoints
  /profile/addresses:
    get:
      tags:
        - Customer Profile
      summary: Get customer saved addresses
      description: |
        Retrieve all saved addresses for the authenticated customer.
        Includes shipping and billing addresses for faster checkout.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 100 requests per minute per user.
      operationId: getCustomerAddresses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Customer addresses retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  addresses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Address'
                  total:
                    type: integer
                    description: Total number of saved addresses
                    example: 2
                required:
                  - addresses
                  - total
              examples:
                customer_addresses:
                  $ref: '#/components/examples/customer_addresses_list'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Customer Profile
      summary: Add new customer address
      description: |
        Add a new shipping or billing address to customer's saved addresses.
        Address validation is performed before saving.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 20 addresses per customer account.
      operationId: addCustomerAddress
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
            examples:
              add_shipping_address:
                $ref: '#/components/examples/address_create_request'
      responses:
        '201':
          description: Address added successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Address added successfully"
                  address:
                    $ref: '#/components/schemas/Address'
                required:
                  - message
                  - address
              examples:
                address_created:
                  $ref: '#/components/examples/address_create_response'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /profile/addresses/{addressId}:
    put:
      tags:
        - Customer Profile
      summary: Update customer address
      description: |
        Update an existing saved address. Only the address owner can update it.
        Address validation is performed before updating.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 50 updates per hour per user.
      operationId: updateCustomerAddress
      security:
        - bearerAuth: []
      parameters:
        - name: addressId
          in: path
          required: true
          description: Unique identifier for the address
          schema:
            type: string
            example: "addr_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
            examples:
              update_address:
                $ref: '#/components/examples/address_update_request'
      responses:
        '200':
          description: Address updated successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Address updated successfully"
                  address:
                    $ref: '#/components/schemas/Address'
                required:
                  - message
                  - address
              examples:
                address_updated:
                  $ref: '#/components/examples/address_update_response'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Customer Profile
      summary: Delete customer address
      description: |
        Delete a saved address from customer's account.
        Cannot delete the default address if it's the only address.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 20 deletions per hour per user.
      operationId: deleteCustomerAddress
      security:
        - bearerAuth: []
      parameters:
        - name: addressId
          in: path
          required: true
          description: Unique identifier for the address
          schema:
            type: string
            example: "addr_123"
      responses:
        '200':
          description: Address deleted successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Address deleted successfully"
                  deletedAddressId:
                    type: string
                    example: "addr_123"
                required:
                  - message
                  - deletedAddressId
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                cannot_delete_default:
                  summary: Cannot delete default address
                  value:
                    error: CANNOT_DELETE_DEFAULT_ADDRESS
                    message: Cannot delete the only remaining address or default address
                    timestamp: "2024-01-22T10:30:00Z"

  /profile/addresses/{addressId}/default:
    patch:
      tags:
        - Customer Profile
      summary: Set address as default
      description: |
        Set a saved address as the default for its type (shipping/billing).
        Previous default address of the same type becomes non-default.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 10 updates per hour per user.
      operationId: setDefaultAddress
      security:
        - bearerAuth: []
      parameters:
        - name: addressId
          in: path
          required: true
          description: Unique identifier for the address
          schema:
            type: string
            example: "addr_123"
      responses:
        '200':
          description: Default address updated successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Default address updated successfully"
                  address:
                    $ref: '#/components/schemas/Address'
                required:
                  - message
                  - address
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Product Catalog Endpoints
  /products:
    get:
      tags:
        - Product Catalog
      summary: List products with filtering and pagination
      description: |
        Retrieve a paginated list of products with optional filtering and sorting.
        Supports filtering by category, price range, availability, and other attributes.

        Rate limited to 100 requests per minute per IP address.
      operationId: listProducts
      security: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of products per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: category
          in: query
          description: Filter by category ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: minPrice
          in: query
          description: Filter by minimum price
          schema:
            type: number
            format: float
            minimum: 0
            example: 10.00
        - name: maxPrice
          in: query
          description: Filter by maximum price
          schema:
            type: number
            format: float
            minimum: 0
            example: 100.00
        - name: inStock
          in: query
          description: Filter by availability
          schema:
            type: boolean
            example: true
        - name: sortBy
          in: query
          description: Sort products by field
          schema:
            type: string
            enum: [name, price, createdAt, rating, popularity]
            default: createdAt
            example: price
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
            example: asc
        - name: search
          in: query
          description: Search term for product name or description
          schema:
            type: string
            minLength: 1
            maxLength: 100
            example: wireless headphones
      responses:
        '200':
          description: Products retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
            X-Total-Count:
              schema:
                type: integer
              description: Total number of products matching filters
            X-Page-Count:
              schema:
                type: integer
              description: Total number of pages available
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                product_list:
                  summary: List of products
                  value:
                    products:
                      - id: 65f1a2b3c4d5e6f7g8h9i0j1
                        name: Wireless Bluetooth Headphones
                        description: High-quality wireless headphones with noise cancellation
                        price: 129.99
                        currency: USD
                        category:
                          id: 65f1a2b3c4d5e6f7g8h9i0a1
                          name: Electronics
                          slug: electronics
                        images:
                          - url: https://images.openshop.com/products/headphones-main.jpg
                            alt: Wireless headphones main view
                            isPrimary: true
                          - url: https://images.openshop.com/products/headphones-side.jpg
                            alt: Wireless headphones side view
                            isPrimary: false
                        inStock: true
                        stockQuantity: 45
                        rating: 4.5
                        reviewCount: 128
                        tags: [wireless, bluetooth, noise-cancelling]
                        createdAt: 2024-01-15T10:30:00Z
                        updatedAt: 2024-01-20T14:15:00Z
                      - id: 65f1a2b3c4d5e6f7g8h9i0j2
                        name: Smartphone Case
                        description: Durable protective case for smartphones
                        price: 24.99
                        currency: USD
                        category:
                          id: 65f1a2b3c4d5e6f7g8h9i0a2
                          name: Accessories
                          slug: accessories
                        images:
                          - url: https://images.openshop.com/products/case-main.jpg
                            alt: Smartphone case main view
                            isPrimary: true
                        inStock: true
                        stockQuantity: 150
                        rating: 4.2
                        reviewCount: 89
                        tags: [protective, durable]
                        createdAt: 2024-01-10T08:00:00Z
                        updatedAt: 2024-01-18T16:45:00Z
                    pagination:
                      page: 1
                      limit: 20
                      totalItems: 2
                      totalPages: 1
                      hasNextPage: false
                      hasPreviousPage: false
                    timestamp: "2024-01-22T10:30:00Z"

  /products/{id}:
    get:
      tags:
        - Product Catalog
      summary: Get single product details
      description: |
        Retrieve detailed information about a specific product including images, specifications,
        availability, and related products.

        Rate limited to 200 requests per minute per IP address.
      operationId: getProduct
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product identifier
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Product details retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                product_details:
                  $ref: '#/components/examples/product_detail'
        '404':
          $ref: '#/components/responses/NotFound'

  /products/search:
    get:
      tags:
        - Product Catalog
      summary: Search products
      description: |
        Full-text search for products by name, description, tags, and specifications.
        Supports advanced filtering and sorting of search results.

        Rate limited to 50 requests per minute per IP address.
      operationId: searchProducts
      security: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query string
          schema:
            type: string
            minLength: 1
            maxLength: 200
            example: wireless headphones bluetooth
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
            example: 20
        - name: category
          in: query
          description: Filter by category ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: minPrice
          in: query
          description: Filter by minimum price
          schema:
            type: number
            format: float
            minimum: 0
            example: 10.00
        - name: maxPrice
          in: query
          description: Filter by maximum price
          schema:
            type: number
            format: float
            minimum: 0
            example: 100.00
        - name: sortBy
          in: query
          description: Sort results by field
          schema:
            type: string
            enum: [relevance, name, price, rating, createdAt]
            default: relevance
            example: relevance
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
            example: desc
      responses:
        '200':
          description: Search results retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
            X-Total-Count:
              schema:
                type: integer
              description: Total number of search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSearchResponse'

  /categories:
    get:
      tags:
        - Product Catalog
      summary: List all categories
      description: |
        Retrieve all product categories in a hierarchical structure.
        Includes category metadata and product counts.

        Rate limited to 100 requests per minute per IP address.
      operationId: listCategories
      security: []
      parameters:
        - name: includeEmpty
          in: query
          description: Include categories with no products
          schema:
            type: boolean
            default: false
            example: true
      responses:
        '200':
          description: Categories retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              examples:
                categories_list:
                  summary: List of categories
                  value:
                    categories:
                      - id: 65f1a2b3c4d5e6f7g8h9i0a1
                        name: Electronics
                        slug: electronics
                        description: Electronic devices and gadgets
                        parentId: null
                        level: 0
                        productCount: 245
                        imageUrl: https://images.openshop.com/categories/electronics.jpg
                        children:
                          - id: 65f1a2b3c4d5e6f7g8h9i0a2
                            name: Headphones
                            slug: headphones
                            description: Audio headphones and earphones
                            parentId: 65f1a2b3c4d5e6f7g8h9i0a1
                            level: 1
                            productCount: 48
                            imageUrl: https://images.openshop.com/categories/headphones.jpg
                            children: []
                            createdAt: 2024-01-10T08:00:00Z
                            updatedAt: 2024-01-15T10:30:00Z
                          - id: 65f1a2b3c4d5e6f7g8h9i0a3
                            name: Smartphones
                            slug: smartphones
                            description: Mobile phones and accessories
                            parentId: 65f1a2b3c4d5e6f7g8h9i0a1
                            level: 1
                            productCount: 89
                            imageUrl: https://images.openshop.com/categories/smartphones.jpg
                            children: []
                            createdAt: 2024-01-10T08:00:00Z
                            updatedAt: 2024-01-15T10:30:00Z
                        createdAt: 2024-01-10T08:00:00Z
                        updatedAt: 2024-01-15T10:30:00Z
                      - id: 65f1a2b3c4d5e6f7g8h9i0a4
                        name: Clothing
                        slug: clothing
                        description: Fashion and apparel
                        parentId: null
                        level: 0
                        productCount: 156
                        imageUrl: https://images.openshop.com/categories/clothing.jpg
                        children: []
                        createdAt: 2024-01-10T08:00:00Z
                        updatedAt: 2024-01-15T10:30:00Z
                    timestamp: "2024-01-22T10:30:00Z"

  /categories/{id}:
    get:
      tags:
        - Product Catalog
      summary: Get category details
      description: |
        Retrieve detailed information about a specific category including
        subcategories and metadata.

        Rate limited to 100 requests per minute per IP address.
      operationId: getCategory
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category identifier
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Category details retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'

  /categories/{id}/products:
    get:
      tags:
        - Product Catalog
      summary: Get products in a category
      description: |
        Retrieve all products belonging to a specific category with pagination and filtering.
        Includes products from subcategories if specified.

        Rate limited to 100 requests per minute per IP address.
      operationId: getCategoryProducts
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category identifier
          schema:
            $ref: '#/components/schemas/ID'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of products per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: includeSubcategories
          in: query
          description: Include products from subcategories
          schema:
            type: boolean
            default: false
            example: true
        - name: minPrice
          in: query
          description: Filter by minimum price
          schema:
            type: number
            format: float
            minimum: 0
            example: 10.00
        - name: maxPrice
          in: query
          description: Filter by maximum price
          schema:
            type: number
            format: float
            minimum: 0
            example: 100.00
        - name: inStock
          in: query
          description: Filter by availability
          schema:
            type: boolean
            example: true
        - name: sortBy
          in: query
          description: Sort products by field
          schema:
            type: string
            enum: [name, price, createdAt, rating, popularity]
            default: createdAt
            example: price
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
            example: asc
      responses:
        '200':
          description: Category products retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
            X-Total-Count:
              schema:
                type: integer
              description: Total number of products in category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryProductsResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # Shopping Cart Endpoints
  /cart:
    get:
      tags:
        - Shopping Cart
      summary: Get current cart
      description: |
        Retrieve the authenticated customer's current shopping cart with all items,
        pricing information, and applicable discounts.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 100 requests per minute per user.
      operationId: getCart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
              examples:
                cart_with_items:
                  summary: Cart with items
                  value:
                    id: 65f1a2b3c4d5e6f7g8h9i0k1
                    customerId: 507f1f77bcf86cd799439011
                    items:
                      - id: 65f1a2b3c4d5e6f7g8h9i0l1
                        productId: 65f1a2b3c4d5e6f7g8h9i0j1
                        product:
                          id: 65f1a2b3c4d5e6f7g8h9i0j1
                          name: Wireless Bluetooth Headphones
                          price: 129.99
                          currency: USD
                          inStock: true
                          stockQuantity: 45
                          images:
                            - url: https://images.openshop.com/products/headphones-main.jpg
                              alt: Wireless headphones main view
                              isPrimary: true
                        quantity: 2
                        unitPrice: 129.99
                        totalPrice: 259.98
                        addedAt: "2024-01-20T10:30:00Z"
                      - id: 65f1a2b3c4d5e6f7g8h9i0l2
                        productId: 65f1a2b3c4d5e6f7g8h9i0j2
                        product:
                          id: 65f1a2b3c4d5e6f7g8h9i0j2
                          name: Smartphone Case
                          price: 24.99
                          currency: USD
                          inStock: true
                          stockQuantity: 150
                          images:
                            - url: https://images.openshop.com/products/case-main.jpg
                              alt: Smartphone case main view
                              isPrimary: true
                        quantity: 1
                        unitPrice: 24.99
                        totalPrice: 24.99
                        addedAt: "2024-01-21T14:15:00Z"
                    summary:
                      totalItems: 3
                      subtotal: 284.97
                      taxAmount: 22.80
                      shippingAmount: 9.99
                      discountAmount: 0.00
                      totalAmount: 317.76
                      currency: USD
                    createdAt: "2024-01-20T10:30:00Z"
                    updatedAt: "2024-01-21T14:15:00Z"
                empty_cart:
                  summary: Empty cart
                  value:
                    id: 65f1a2b3c4d5e6f7g8h9i0k1
                    customerId: 507f1f77bcf86cd799439011
                    items: []
                    summary:
                      totalItems: 0
                      subtotal: 0.00
                      taxAmount: 0.00
                      shippingAmount: 0.00
                      discountAmount: 0.00
                      totalAmount: 0.00
                      currency: USD
                    createdAt: \"2024-01-20T10:30:00Z\"
                    updatedAt: \"2024-01-20T10:30:00Z\"
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags:
        - Shopping Cart
      summary: Clear entire cart
      description: |
        Remove all items from the authenticated customer's shopping cart.
        This action cannot be undone.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 20 requests per minute per user.
      operationId: clearCart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart cleared successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              examples:
                cart_cleared:
                  summary: Cart cleared
                  value:
                    message: Cart cleared successfully
                    timestamp: "2024-01-22T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /cart/items:
    post:
      tags:
        - Shopping Cart
      summary: Add item to cart
      description: |
        Add a product to the authenticated customer's shopping cart.
        If the product is already in the cart, the quantity will be updated.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 50 requests per minute per user.
      operationId: addCartItem
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
            examples:
              add_product:
                $ref: '#/components/examples/cart_add_item'
      responses:
        '201':
          description: Item added to cart successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartActionResponse'
              examples:
                item_added:
                  summary: Item added to cart
                  value:
                    message: Item added to cart successfully
                    cartItem:
                      id: 65f1a2b3c4d5e6f7g8h9i0l1
                      product:
                        id: 65f1a2b3c4d5e6f7g8h9i0j1
                        name: Wireless Bluetooth Headphones
                        price: 129.99
                        currency: USD
                        inStock: true
                        stockQuantity: 43
                        images:
                          - url: https://images.openshop.com/products/headphones-main.jpg
                            alt: Wireless headphones main view
                            isPrimary: true
                      quantity: 2
                      unitPrice: 129.99
                      totalPrice: 259.98
                      addedAt: 2024-01-22T10:30:00Z
                    cart:
                      totalItems: 2
                      subtotal: 259.98
                      totalAmount: 289.97
                      currency: USD
                    timestamp: "2024-01-22T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                product_not_found:
                  summary: Product not found
                  value:
                    error: PRODUCT_NOT_FOUND
                    message: The specified product does not exist
                    timestamp: "2024-01-22T10:30:00Z"
        '422':
          description: Validation error or insufficient stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /cart/items/{itemId}:
    put:
      tags:
        - Shopping Cart
      summary: Update cart item quantity
      description: |
        Update the quantity of a specific item in the authenticated customer's cart.
        Setting quantity to 0 will remove the item from the cart.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 50 requests per minute per user.
      operationId: updateCartItem
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: Cart item identifier
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItemRequest'
            examples:
              update_quantity:
                summary: Update item quantity
                value:
                  quantity: 3
      responses:
        '200':
          description: Cart item updated successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartActionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                item_not_found:
                  summary: Cart item not found
                  value:
                    error: CART_ITEM_NOT_FOUND
                    message: The specified cart item does not exist
                    timestamp: "2024-01-22T10:30:00Z"

    delete:
      tags:
        - Shopping Cart
      summary: Remove item from cart
      description: |
        Remove a specific item from the authenticated customer's shopping cart.
        This action cannot be undone.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 50 requests per minute per user.
      operationId: removeCartItem
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: Cart item identifier
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Item removed from cart successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartActionResponse'
              examples:
                item_removed:
                  summary: Item removed from cart
                  value:
                    message: Item removed from cart successfully
                    cart:
                      totalItems: 1
                      subtotal: 24.99
                      totalAmount: 34.98
                      currency: USD
                    timestamp: "2024-01-22T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                item_not_found:
                  summary: Cart item not found
                  value:
                    error: CART_ITEM_NOT_FOUND
                    message: The specified cart item does not exist
                    timestamp: "2024-01-22T10:30:00Z"

  # Order Management Endpoints
  /orders:
    get:
      tags:
        - Order Management
      summary: List customer orders
      description: |
        Retrieve a paginated list of orders for the authenticated customer.
        Supports filtering by status and date range with sorting options.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 100 requests per minute per user.
      operationId: listOrders
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of orders per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
            example: 20
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [pending, confirmed, processing, shipped, delivered, cancelled]
            example: confirmed
        - name: startDate
          in: query
          description: Filter orders from this date (inclusive)
          schema:
            type: string
            format: date
            example: 2024-01-01
        - name: endDate
          in: query
          description: Filter orders until this date (inclusive)
          schema:
            type: string
            format: date
            example: 2024-01-31
        - name: sortBy
          in: query
          description: Sort orders by field
          schema:
            type: string
            enum: [createdAt, updatedAt, totalAmount, orderNumber]
            default: createdAt
            example: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
            example: desc
      responses:
        '200':
          description: Orders retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
            X-Total-Count:
              schema:
                type: integer
              description: Total number of orders matching filters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              examples:
                orders_list:
                  summary: List of customer orders
                  value:
                    orders:
                      - id: 65f1a2b3c4d5e6f7g8h9i0m1
                        orderNumber: ORD-2024-000123
                        customerId: 507f1f77bcf86cd799439011
                        status: delivered
                        items:
                          - productId: 65f1a2b3c4d5e6f7g8h9i0j1
                            productName: Wireless Bluetooth Headphones
                            quantity: 1
                            unitPrice: 129.99
                            totalPrice: 129.99
                        summary:
                          subtotal: 129.99
                          taxAmount: 10.40
                          shippingAmount: 9.99
                          discountAmount: 0.00
                          totalAmount: 150.38
                          currency: USD
                        shippingAddress:
                          fullName: John Doe
                          addressLine1: 123 Main Street
                          addressLine2: Apt 4B
                          city: New York
                          state: NY
                          postalCode: 10001
                          country: US
                        paymentInfo:
                          provider: stripe
                          amount: 150.38
                          currency: USD
                          status: succeeded
                          providerAdditionalInfo:
                            paymentIntentId: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
                            clientSecret: pi_3MqxDr2eZvKYlo2C0J8yQZ7P_secret_abc123def456
                            publishableKey: pk_test_abc123def456
                        transactionId: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
                        paidAt: "2024-01-22T14:30:00Z"
                        shippingInfo:
                          carrier: ups
                          service: ground
                          status: delivered
                          estimatedDelivery: "2024-01-25T18:00:00Z"
                          shippedAt: "2024-01-23T14:30:00Z"
                          deliveredAt: "2024-01-25T16:45:00Z"
                          providerAdditionalInfo:
                            trackingNumber: 1Z999AA1234567890
                            serviceCode: "03"
                        createdAt: 2024-01-22T10:30:00Z
                        updatedAt: 2024-01-24T14:15:00Z
                      - id: 65f1a2b3c4d5e6f7g8h9i0m2
                        orderNumber: ORD-2024-000124
                        customerId: 507f1f77bcf86cd799439011
                        status: processing
                        items:
                          - productId: 65f1a2b3c4d5e6f7g8h9i0j2
                            productName: Smartphone Case
                            quantity: 2
                            unitPrice: 24.99
                            totalPrice: 49.98
                        summary:
                          subtotal: 49.98
                          taxAmount: 4.00
                          shippingAmount: 9.99
                          discountAmount: 5.00
                          totalAmount: 58.97
                          currency: USD
                        shippingAddress:
                          fullName: John Doe
                          addressLine1: 123 Main Street
                          city: New York
                          state: NY
                          postalCode: 10001
                          country: US
                        paymentInfo:
                          provider: paypal
                          amount: 58.97
                          currency: USD
                          status: requires_payment
                          providerAdditionalInfo:
                            orderId: 8XH12345678901234
                            approvalUrl: https://www.paypal.com/checkoutnow?token=8XH12345678901234
                        shippingInfo:
                          carrier: fedex
                          service: ground
                          status: pending
                          estimatedDelivery: "2024-01-28T18:00:00Z"
                          providerAdditionalInfo:
                            trackingNumber: "1234567890123456"
                            serviceType: FEDEX_GROUND
                        createdAt: 2024-01-23T15:45:00Z
                        updatedAt: 2024-01-23T15:45:00Z
                    pagination:
                      page: 1
                      limit: 20
                      totalItems: 2
                      totalPages: 1
                      hasNextPage: false
                      hasPreviousPage: false
                    timestamp: "2024-01-24T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Order Management
      summary: Create new order
      description: |
        Create a new order from the authenticated customer's cart items and initialize payment intent.

        This endpoint will:
        - Create an order with status 'pending' and payment status 'requires_payment'
        - Create a payment intent with the selected payment provider (Stripe, PayPal, etc.)
        - Return payment details (client_secret, payment_intent_id) for client-side SDK integration
        - Keep cart items until payment is confirmed (cart cleared on payment confirmation)
        - Store complete address copies (not references) to preserve delivery information

        **Address Handling**: Complete address objects must be provided. If using saved addresses,
        the client should retrieve the full address details and include them in the request.
        This ensures immutable delivery/billing records that won't change if saved addresses are modified.

        The client should use the returned payment intent details with the appropriate
        payment SDK (Stripe Elements, PayPal SDK, etc.) to complete payment.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 20 requests per minute per user.
      operationId: createOrder
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
            examples:
              create_order:
                $ref: '#/components/examples/order_create_request'
      responses:
        '201':
          description: Order created successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
              examples:
                stripe_order_created:
                  summary: Order created with Stripe payment intent
                  value:
                    message: Order created successfully
                    order:
                      id: 65f1a2b3c4d5e6f7g8h9i0m1
                      orderNumber: ORD-2024-000123
                      customerId: 507f1f77bcf86cd799439011
                      status: pending
                      items:
                        - productId: 65f1a2b3c4d5e6f7g8h9i0j1
                          productName: Wireless Bluetooth Headphones
                          productImage: https://images.openshop.com/products/headphones-main.jpg
                          quantity: 2
                          unitPrice: 129.99
                          totalPrice: 259.98
                        - productId: 65f1a2b3c4d5e6f7g8h9i0j2
                          productName: Smartphone Case
                          productImage: https://images.openshop.com/products/case-main.jpg
                          quantity: 1
                          unitPrice: 24.99
                          totalPrice: 24.99
                      summary:
                        subtotal: 284.97
                        taxAmount: 22.80
                        shippingAmount: 9.99
                        discountAmount: 0.00
                        totalAmount: 317.76
                        currency: USD
                      shippingAddress:
                        fullName: John Doe
                        addressLine1: 123 Main Street
                        addressLine2: Apt 4B
                        city: New York
                        state: NY
                        postalCode: 10001
                        country: US
                        phone: +1234567890
                      billingAddress:
                        fullName: John Doe
                        addressLine1: 123 Main Street
                        addressLine2: Apt 4B
                        city: New York
                        state: NY
                        postalCode: 10001
                        country: US
                        phone: +1234567890
                      paymentInfo:
                        provider: stripe
                        amount: 317.76
                        currency: USD
                        status: requires_payment
                        providerAdditionalInfo:
                          paymentIntentId: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
                          clientSecret: pi_3MqxDr2eZvKYlo2C0J8yQZ7P_secret_abc123def456
                          publishableKey: pk_test_abc123def456
                      shippingInfo:
                        carrier: ups
                        service: ground
                        status: pending
                        estimatedDelivery: "2024-01-29T18:00:00Z"
                        providerAdditionalInfo:
                          trackingNumber: 1Z999AA1234567890
                          serviceCode: "03"
                      notes: Please leave package at front door
                      createdAt: 2024-01-24T10:30:00Z
                      updatedAt: 2024-01-24T10:30:00Z
                    paymentInfo:
                      provider: stripe
                      amount: 317.76
                      currency: USD
                      status: requires_payment
                      expiresAt: "2024-01-24T11:30:00Z"
                      providerAdditionalInfo:
                        paymentIntentId: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
                        clientSecret: pi_3MqxDr2eZvKYlo2C0J8yQZ7P_secret_abc123def456
                        publishableKey: pk_test_abc123def456
                    timestamp: "2024-01-24T10:30:00Z"
                paypal_order_created:
                  summary: Order created with PayPal payment intent
                  value:
                    message: Order created successfully. Complete payment to confirm.
                    order:
                      id: 65f1a2b3c4d5e6f7g8h9i0m2
                      orderNumber: ORD-2024-000124
                      customerId: 507f1f77bcf86cd799439011
                      status: pending
                      paymentInfo:
                        provider: paypal
                        amount: 317.76
                        currency: USD
                        status: requires_payment
                        providerAdditionalInfo:
                          orderId: 8XH12345678901234
                          approvalUrl: https://www.paypal.com/checkoutnow?token=8XH12345678901234
                          accessToken: A21AALcE7XFh9dGrR8...
                      shippingInfo:
                        carrier: fedex
                        service: ground
                        status: pending
                        estimatedDelivery: "2024-01-29T18:00:00Z"
                        providerAdditionalInfo:
                          trackingNumber: "1234567890123456"
                          serviceType: FEDEX_GROUND
                    paymentInfo:
                      provider: paypal
                      amount: 317.76
                      currency: USD
                      status: requires_payment
                      expiresAt: "2024-01-24T11:30:00Z"
                      providerAdditionalInfo:
                        orderId: 8XH12345678901234
                        approvalUrl: https://www.paypal.com/checkoutnow?token=8XH12345678901234
                        accessToken: A21AALcE7XFh9dGrR8...
                    timestamp: "2024-01-24T10:30:00Z"
        '400':
          description: Bad request - empty cart or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                empty_cart:
                  summary: Empty cart error
                  value:
                    error: EMPTY_CART
                    message: Cannot create order from empty cart
                    timestamp: "2024-01-24T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /orders/{id}:
    get:
      tags:
        - Order Management
      summary: Get order details
      description: |
        Retrieve detailed information about a specific order.
        Only the order owner can access their order details.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 100 requests per minute per user.
      operationId: getOrder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order identifier
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Order details retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied - not the order owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: ACCESS_DENIED
                    message: You can only access your own orders
                    timestamp: "2024-01-24T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /orders/{id}/cancel:
    put:
      tags:
        - Order Management
      summary: Cancel order
      description: |
        Cancel an order if it's still in a cancellable state (pending, confirmed).
        Orders that are already processing, shipped, or delivered cannot be cancelled.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 10 requests per minute per user.
      operationId: cancelOrder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order identifier
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrderRequest'
            examples:
              cancel_order:
                summary: Cancel order with reason
                value:
                  reason: Changed mind about purchase
      responses:
        '200':
          description: Order cancelled successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderActionResponse'
              examples:
                order_cancelled:
                  summary: Order cancelled
                  value:
                    message: Order cancelled successfully
                    order:
                      id: 65f1a2b3c4d5e6f7g8h9i0m1
                      orderNumber: ORD-2024-000123
                      status: cancelled
                      cancelledAt: 2024-01-24T10:30:00Z
                      cancellationReason: Changed mind about purchase
                    timestamp: "2024-01-24T10:30:00Z"
        '400':
          description: Order cannot be cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                cannot_cancel:
                  summary: Cannot cancel order
                  value:
                    error: ORDER_NOT_CANCELLABLE
                    message: Order cannot be cancelled as it is already being processed
                    timestamp: "2024-01-24T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied - not the order owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: ACCESS_DENIED
                    message: You can only cancel your own orders
                    timestamp: "2024-01-24T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /orders/{id}/payment:
    put:
      tags:
        - Order Management
      summary: Update order payment information
      description: |
        Update payment information for an order, typically used to confirm payment
        after successful payment processing or to update payment status.

        This endpoint handles scenarios like:
        - Confirming payment after payment gateway callback
        - Updating payment status from payment webhooks
        - Manual payment confirmation by admin
        - Partial payment updates

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 50 requests per minute per user.
      operationId: updateOrderPayment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderPaymentRequest'
            examples:
              confirm_payment:
                summary: Confirm successful payment
                value:
                  status: succeeded
                  transactionId: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
                  provider: stripe
                  paidAt: "2024-01-22T14:30:00Z"
                  paymentMeta:
                    last4: "4242"
                    brand: visa
              payment_failed:
                summary: Update failed payment
                value:
                  status: failed
                  failureReason: insufficient_funds
                  provider: stripe
      responses:
        '200':
          description: Payment information updated successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - order
                  - timestamp
                properties:
                  message:
                    type: string
                    example: Payment information updated successfully
                  order:
                    $ref: '#/components/schemas/Order'
                  timestamp:
                    $ref: '#/components/schemas/Timestamp'
        '400':
          description: Invalid payment update request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_status_transition:
                  summary: Invalid payment status transition
                  value:
                    error: INVALID_PAYMENT_STATUS_TRANSITION
                    message: Cannot change payment status from 'succeeded' to 'requires_payment'
                    timestamp: "2024-01-22T14:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Not authorized to update this order's payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /orders/{id}/payment/confirm:
    post:
      tags:
        - Order Management
      summary: Confirm order payment
      description: |
        Confirm payment for a pending order after successful payment processing.
        This endpoint is typically called after payment gateway confirmation
        or webhook processing to move the order from pending to confirmed status.

        This will:
        - Update payment status to 'succeeded'
        - Change order status to 'confirmed'
        - Trigger inventory reservation
        - Send confirmation emails

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 50 requests per minute per user.
      operationId: confirmOrderPayment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmOrderPaymentRequest'
            examples:
              stripe_confirmation:
                summary: Stripe payment confirmation
                value:
                  transactionId: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
                  provider: stripe
                  amount: 299.99
                  currency: USD
                  paymentMeta:
                    payment_method: pm_1MqxDr2eZvKYlo2C0J8yQZ7P
                    last4: "4242"
                    brand: visa
              paypal_confirmation:
                summary: PayPal payment confirmation
                value:
                  transactionId: PAYID-MUPX3LA123456789A
                  provider: paypal
                  amount: 299.99
                  currency: USD
      responses:
        '200':
          description: Payment confirmed and order updated successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - order
                  - timestamp
                properties:
                  message:
                    type: string
                    example: Payment confirmed successfully. Order is now being processed.
                  order:
                    $ref: '#/components/schemas/Order'
                  timestamp:
                    $ref: '#/components/schemas/Timestamp'
        '400':
          description: Cannot confirm payment for this order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                already_paid:
                  summary: Order already paid
                  value:
                    error: ORDER_ALREADY_PAID
                    message: This order has already been paid and confirmed
                    timestamp: "2024-01-22T14:30:00Z"
                invalid_order_status:
                  summary: Invalid order status for payment confirmation
                  value:
                    error: INVALID_ORDER_STATUS
                    message: Cannot confirm payment for cancelled order
                    timestamp: "2024-01-22T14:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Not authorized to confirm payment for this order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # Product Reviews Endpoints
  /products/{id}/reviews:
    get:
      tags:
        - Product Reviews
      summary: Get product reviews
      description: |
        Retrieve all reviews for a specific product with pagination and filtering options.
        Supports sorting by date, rating, and helpfulness.

        Rate limited to 100 requests per minute per IP address.
      operationId: getProductReviews
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product identifier
          schema:
            $ref: '#/components/schemas/ID'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of reviews per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
            example: 20
        - name: rating
          in: query
          description: Filter by rating (1-5 stars)
          schema:
            type: integer
            minimum: 1
            maximum: 5
            example: 5
        - name: sortBy
          in: query
          description: Sort reviews by field
          schema:
            type: string
            enum: [createdAt, rating, helpfulness]
            default: createdAt
            example: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
            example: desc
      responses:
        '200':
          description: Product reviews retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
            X-Total-Count:
              schema:
                type: integer
              description: Total number of reviews for this product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReviewsResponse'
              examples:
                product_reviews:
                  summary: Product reviews with ratings
                  value:
                    reviews:
                      - id: 65f1a2b3c4d5e6f7g8h9i0n1
                        customerId: 507f1f77bcf86cd799439012
                        customerName: Jane Smith
                        rating: 5
                        title: Excellent headphones!
                        comment: These headphones have amazing sound quality and noise cancellation. Perfect for work and travel. Highly recommended!
                        verified: true
                        helpful: 12
                        notHelpful: 1
                        images:
                          - url: https://images.openshop.com/reviews/review-1-img1.jpg
                            alt: Headphones unboxed
                          - url: https://images.openshop.com/reviews/review-1-img2.jpg
                            alt: Headphones in use
                        createdAt: 2024-01-20T14:30:00Z
                        updatedAt: 2024-01-20T14:30:00Z
                      - id: 65f1a2b3c4d5e6f7g8h9i0n2
                        customerId: 507f1f77bcf86cd799439013
                        customerName: Mike Johnson
                        rating: 4
                        title: Good value for money
                        comment: Great headphones overall. Battery life is excellent and build quality is solid. Only minor complaint is the touch controls can be finicky sometimes.
                        verified: true
                        helpful: 8
                        notHelpful: 2
                        images: []
                        createdAt: 2024-01-18T09:15:00Z
                        updatedAt: 2024-01-18T09:15:00Z
                      - id: 65f1a2b3c4d5e6f7g8h9i0n3
                        customerId: 507f1f77bcf86cd799439014
                        customerName: Sarah Wilson
                        rating: 3
                        title: Average experience
                        comment: The headphones are okay but not exceptional. Noise cancellation works but could be better. For the price, there might be better alternatives.
                        verified: false
                        helpful: 3
                        notHelpful: 7
                        images: []
                        createdAt: 2024-01-15T16:45:00Z
                        updatedAt: 2024-01-15T16:45:00Z
                    summary:
                      totalReviews: 128
                      averageRating: 4.2
                      ratingDistribution:
                        1: 5
                        2: 8
                        3: 15
                        4: 42
                        5: 58
                    pagination:
                      page: 1
                      limit: 20
                      totalItems: 128
                      totalPages: 7
                      hasNextPage: true
                      hasPreviousPage: false
                    timestamp: "2024-01-24T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Product Reviews
      summary: Add product review
      description: |
        Add a new review for a specific product. Customers can only review products
        they have purchased and can only review each product once.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 10 reviews per hour per user.
      operationId: addProductReview
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product identifier
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddReviewFormRequest'
        examples:
          add_review:
            summary: Add product review
            value:
              rating: 5
              title: Amazing product!
              comment: This product exceeded my expectations. Great quality and fast delivery. Would definitely buy again!
      responses:
        '201':
          description: Review added successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              examples:
                review_added:
                  summary: Review added successfully
                  value:
                    message: Review added successfully
                    review:
                      id: 65f1a2b3c4d5e6f7g8h9i0n4
                      productId: 65f1a2b3c4d5e6f7g8h9i0j1
                      customerId: 507f1f77bcf86cd799439011
                      customerName: John Doe
                      rating: 5
                      title: Amazing product!
                      comment: This product exceeded my expectations. Great quality and fast delivery. Would definitely buy again!
                      verified: true
                      helpful: 0
                      notHelpful: 0
                      images: []
                      createdAt: 2024-01-24T10:30:00Z
                      updatedAt: 2024-01-24T10:30:00Z
                    timestamp: "2024-01-24T10:30:00Z"
        '400':
          description: Bad request - already reviewed or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                already_reviewed:
                  summary: Product already reviewed
                  value:
                    error: ALREADY_REVIEWED
                    message: You have already reviewed this product
                    timestamp: "2024-01-24T10:30:00Z"
                not_purchased:
                  summary: Product not purchased
                  value:
                    error: NOT_PURCHASED
                    message: You can only review products you have purchased
                    timestamp: "2024-01-24T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /reviews/{id}:
    put:
      tags:
        - Product Reviews
      summary: Update review
      description: |
        Update an existing review. Only the review author can update their review.
        Reviews can be updated within 30 days of creation.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 20 updates per hour per user.
      operationId: updateReview
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Review identifier
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateReviewFormRequest'
        examples:
          update_review:
            summary: Update review content
            value:
              rating: 4
              title: Good product with minor issues
              comment: Updated my review after using for a month. Still good quality but found some minor issues with the touch controls.
      responses:
        '200':
          description: Review updated successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Bad request - update not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                update_expired:
                  summary: Update period expired
                  value:
                    error: UPDATE_EXPIRED
                    message: Reviews can only be updated within 30 days of creation
                    timestamp: "2024-01-24T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied - not the review author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: ACCESS_DENIED
                    message: You can only update your own reviews
                    timestamp: "2024-01-24T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Product Reviews
      summary: Delete review
      description: |
        Delete an existing review. Only the review author can delete their review.
        Reviews can be deleted within 30 days of creation.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 10 deletions per hour per user.
      operationId: deleteReview
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Review identifier
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Review deleted successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
              examples:
                review_deleted:
                  summary: Review deleted
                  value:
                    message: Review deleted successfully
                    timestamp: "2024-01-24T10:30:00Z"
        '400':
          description: Bad request - deletion not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                delete_expired:
                  summary: Delete period expired
                  value:
                    error: DELETE_EXPIRED
                    message: Reviews can only be deleted within 30 days of creation
                    timestamp: "2024-01-24T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Access denied - not the review author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: ACCESS_DENIED
                    message: You can only delete your own reviews
                    timestamp: "2024-01-24T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'


  # Wishlist Endpoints
  /wishlist:
    get:
      tags:
        - Wishlist
      summary: Get customer wishlist
      description: |
        Retrieve the authenticated customer's wishlist with all saved items.
        Includes product availability and pricing information.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 100 requests per minute per user.
      operationId: getWishlist
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: sortBy
          in: query
          description: Sort wishlist items by field
          schema:
            type: string
            enum: [addedAt, productName, price]
            default: addedAt
            example: addedAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
            example: desc
      responses:
        '200':
          description: Wishlist retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
            X-Total-Count:
              schema:
                type: integer
              description: Total number of items in wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wishlist'
              examples:
                wishlist_with_items:
                  summary: Wishlist with items
                  value:
                    wishlist:
                      id: 65f1a2b3c4d5e6f7g8h9i0p1
                      customerId: 507f1f77bcf86cd799439011
                      items:
                        - id: 65f1a2b3c4d5e6f7g8h9i0q1
                          product:
                            id: 65f1a2b3c4d5e6f7g8h9i0j1
                            name: Wireless Bluetooth Headphones
                            description: High-quality wireless headphones with noise cancellation
                            price: 129.99
                            currency: USD
                            category:
                              id: 65f1a2b3c4d5e6f7g8h9i0a1
                              name: Electronics
                              slug: electronics
                            images:
                              - url: https://images.openshop.com/products/headphones-main.jpg
                                alt: Wireless headphones main view
                                isPrimary: true
                            inStock: true
                            stockQuantity: 45
                            rating: 4.5
                            reviewCount: 128
                          addedAt: 2024-01-22T10:30:00Z
                        - id: 65f1a2b3c4d5e6f7g8h9i0q2
                          product:
                            id: 65f1a2b3c4d5e6f7g8h9i0j3
                            name: Gaming Mechanical Keyboard
                            description: RGB backlit mechanical keyboard with tactile switches
                            price: 89.99
                            currency: USD
                            category:
                              id: 65f1a2b3c4d5e6f7g8h9i0a1
                              name: Electronics
                              slug: electronics
                            images:
                              - url: https://images.openshop.com/products/keyboard-main.jpg
                                alt: Gaming keyboard main view
                                isPrimary: true
                            inStock: false
                            stockQuantity: 0
                            rating: 4.7
                            reviewCount: 89
                          addedAt: 2024-01-20T15:45:00Z
                      summary:
                        totalItems: 2
                        totalValue: 219.98
                        inStockItems: 1
                        outOfStockItems: 1
                        currency: USD
                      createdAt: 2024-01-20T15:45:00Z
                      updatedAt: 2024-01-22T10:30:00Z
                    pagination:
                      page: 1
                      limit: 20
                      totalItems: 2
                      totalPages: 1
                      hasNextPage: false
                      hasPreviousPage: false
                    timestamp: "2024-01-24T10:30:00Z"
                empty_wishlist:
                  summary: Empty wishlist
                  value:
                    wishlist:
                      id: 65f1a2b3c4d5e6f7g8h9i0p1
                      customerId: 507f1f77bcf86cd799439011
                      items: []
                      summary:
                        totalItems: 0
                        totalValue: 0.00
                        inStockItems: 0
                        outOfStockItems: 0
                        currency: USD
                      createdAt: 2024-01-20T15:45:00Z
                      updatedAt: 2024-01-20T15:45:00Z
                    pagination:
                      page: 1
                      limit: 20
                      totalItems: 0
                      totalPages: 0
                      hasNextPage: false
                      hasPreviousPage: false
                    timestamp: "2024-01-24T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /wishlist/items:
    post:
      tags:
        - Wishlist
      summary: Add item to wishlist
      description: |
        Add a product to the authenticated customer's wishlist.
        If the product is already in the wishlist, no duplicate will be created.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 50 requests per minute per user.
      operationId: addWishlistItem
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWishlistItemRequest'
            examples:
              add_product:
                summary: Add product to wishlist
                value:
                  productId: 65f1a2b3c4d5e6f7g8h9i0j1
      responses:
        '201':
          description: Item added to wishlist successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishlistActionResponse'
              examples:
                item_added:
                  summary: Item added to wishlist
                  value:
                    message: Item added to wishlist successfully
                    wishlistItem:
                      id: 65f1a2b3c4d5e6f7g8h9i0q1
                      product:
                        id: 65f1a2b3c4d5e6f7g8h9i0j1
                        name: Wireless Bluetooth Headphones
                        description: High-quality wireless headphones with noise cancellation
                        price: 129.99
                        currency: USD
                        category:
                          id: 65f1a2b3c4d5e6f7g8h9i0a1
                          name: Electronics
                          slug: electronics
                        images:
                          - url: https://images.openshop.com/products/headphones-main.jpg
                            alt: Wireless headphones main view
                            isPrimary: true
                        inStock: true
                        stockQuantity: 45
                        rating: 4.5
                        reviewCount: 128
                      addedAt: 2024-01-24T10:30:00Z
                    wishlist:
                      totalItems: 3
                      totalValue: 349.97
                      currency: USD
                    timestamp: "2024-01-24T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                product_not_found:
                  summary: Product not found
                  value:
                    error: PRODUCT_NOT_FOUND
                    message: The specified product does not exist
                    timestamp: "2024-01-24T10:30:00Z"
        '409':
          description: Product already in wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                already_in_wishlist:
                  summary: Product already in wishlist
                  value:
                    error: ALREADY_IN_WISHLIST
                    message: This product is already in your wishlist
                    timestamp: "2024-01-24T10:30:00Z"

  /wishlist/items/{itemId}:
    delete:
      tags:
        - Wishlist
      summary: Remove item from wishlist
      description: |
        Remove a specific item from the authenticated customer's wishlist.
        This action cannot be undone.

        Requires valid JWT Bearer token in Authorization header.
        Rate limited to 50 requests per minute per user.
      operationId: removeWishlistItem
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: Wishlist item identifier
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Item removed from wishlist successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishlistActionResponse'
              examples:
                item_removed:
                  summary: Item removed from wishlist
                  value:
                    message: Item removed from wishlist successfully
                    wishlist:
                      totalItems: 2
                      totalValue: 219.98
                      currency: USD
                    timestamp: "2024-01-24T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Wishlist item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                item_not_found:
                  summary: Wishlist item not found
                  value:
                    error: WISHLIST_ITEM_NOT_FOUND
                    message: The specified wishlist item does not exist
                    timestamp: "2024-01-24T10:30:00Z"

  # Admin - Inventory Management Endpoints
  /admin/inventory:
    get:
      tags:
        - Admin - Inventory Management
      summary: List all inventory items with stock details
      description: |
        Retrieve a paginated list of all products with detailed inventory information.
        Supports filtering by stock levels, categories, and suppliers.

        Requires admin JWT Bearer token with inventory management permissions.
        Rate limited to 200 requests per minute per admin user.
      operationId: listInventory
      security:
        - adminBearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: lowStock
          in: query
          description: Filter products with stock below minimum threshold
          schema:
            type: boolean
            example: true
        - name: categoryId
          in: query
          description: Filter by category ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: supplierId
          in: query
          description: Filter by supplier ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: colorFamily
          in: query
          description: Filter by color family
          schema:
            type: string
            enum: [black, white, gray, red, blue, green, yellow, orange, purple, pink, brown, navy, rose_gold, mint, coral, burgundy, multicolor]
            example: black
        - name: searchTerm
          in: query
          description: Search in product name, SKU, or colorway name
          schema:
            type: string
            maxLength: 100
            example: "bluetooth black"
        - name: sortBy
          in: query
          description: Sort results by field
          schema:
            type: string
            enum: [name, stockQuantity, lastUpdated, sellingPrice, colorway.name]
            default: name
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Inventory list retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
            X-RateLimit-Limit:
              schema:
                type: integer
              description: Request limit per time window
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: Requests remaining in current time window
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/inventory/{id}:
    get:
      tags:
        - Admin - Inventory Management
      summary: Get detailed inventory information for a product
      description: |
        Retrieve comprehensive inventory details for a specific product including
        stock levels, movements, supplier information, and cost data.

        Requires admin JWT Bearer token with inventory management permissions.
        Rate limited to 500 requests per minute per admin user.
      operationId: getInventoryDetail
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product identifier
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Inventory details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInventory'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Admin - Inventory Management
      summary: Update inventory details for a product
      description: |
        Update stock levels, minimum thresholds, supplier information, and costs.
        Changes are tracked in the audit log with admin user attribution.

        Requires admin JWT Bearer token with inventory management permissions.
        Rate limited to 100 requests per minute per admin user.
      operationId: updateInventory
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product identifier
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryUpdateRequest'
      responses:
        '200':
          description: Inventory updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInventory'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/inventory/{id}/adjust:
    post:
      tags:
        - Admin - Inventory Management
      summary: Perform manual stock adjustment
      description: |
        Make manual adjustments to stock levels with reason codes and notes.
        All adjustments are logged with admin attribution and timestamps.
        Supports both positive and negative adjustments.

        Requires admin JWT Bearer token with inventory management permissions.
        Rate limited to 50 requests per minute per admin user.
      operationId: adjustStock
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product identifier
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockAdjustmentRequest'
      responses:
        '200':
          description: Stock adjustment completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockAdjustmentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/inventory/{id}/history:
    get:
      tags:
        - Admin - Inventory Management
      summary: Get stock movement history for a product
      description: |
        Retrieve complete audit trail of stock movements, adjustments, and changes
        for a specific product with filtering and pagination.

        Requires admin JWT Bearer token with inventory management permissions.
        Rate limited to 200 requests per minute per admin user.
      operationId: getStockHistory
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product identifier
          schema:
            $ref: '#/components/schemas/ID'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of records per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: fromDate
          in: query
          description: Filter movements from this date
          schema:
            type: string
            format: date-time
            example: "2024-01-01T00:00:00Z"
        - name: toDate
          in: query
          description: Filter movements to this date
          schema:
            type: string
            format: date-time
            example: "2024-12-31T23:59:59Z"
        - name: movementType
          in: query
          description: Filter by movement type
          schema:
            type: string
            enum: [adjustment, sale, restock, return, damage, audit]
      responses:
        '200':
          description: Stock history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockHistoryResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/inventory/low-stock:
    get:
      tags:
        - Admin - Inventory Management
      summary: Get products with low stock levels
      description: |
        Retrieve products that have stock levels below their minimum threshold.
        Useful for generating reorder reports and inventory alerts.

        Requires admin JWT Bearer token with inventory management permissions.
        Rate limited to 100 requests per minute per admin user.
      operationId: getLowStockProducts
      security:
        - adminBearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: severity
          in: query
          description: Filter by stock level severity
          schema:
            type: string
            enum: [critical, low, warning]
            example: critical
        - name: colorFamily
          in: query
          description: Filter by color family
          schema:
            type: string
            enum: [black, white, gray, red, blue, green, yellow, orange, purple, pink, brown, navy, rose_gold, mint, coral, burgundy, multicolor]
            example: black
        - name: productId
          in: query
          description: Filter by specific product ID
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Low stock products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LowStockResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/inventory/bulk-update:
    post:
      tags:
        - Admin - Inventory Management
      summary: Bulk update inventory for multiple products
      description: |
        Update inventory details for multiple products in a single operation.
        Supports CSV upload or JSON payload with validation and error reporting.
        All changes are logged with admin attribution.

        Requires admin JWT Bearer token with inventory management permissions.
        Rate limited to 10 requests per minute per admin user.
      operationId: bulkUpdateInventory
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkInventoryUpdateRequest'
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: CSV file with inventory updates
      responses:
        '200':
          description: Bulk update completed with results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkInventoryUpdateResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/inventory/alerts:
    get:
      tags:
        - Admin - Inventory Management
      summary: Get inventory alerts and notifications
      description: |
        Retrieve active inventory alerts including low stock, overstock,
        and unusual movement patterns requiring admin attention.

        Requires admin JWT Bearer token with inventory management permissions.
        Rate limited to 100 requests per minute per admin user.
      operationId: getInventoryAlerts
      security:
        - adminBearerAuth: []
      parameters:
        - name: alertType
          in: query
          description: Filter by alert type
          schema:
            type: string
            enum: [low_stock, overstock, unusual_movement, expired, damaged]
        - name: severity
          in: query
          description: Filter by alert severity
          schema:
            type: string
            enum: [critical, high, medium, low]
        - name: acknowledged
          in: query
          description: Filter by acknowledgment status
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: Inventory alerts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryAlertsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Admin - Order Management Endpoints
  /admin/orders:
    get:
      tags:
        - Admin - Order Management
      summary: List all customer orders with advanced filtering
      description: |
        Retrieve a paginated list of all customer orders with comprehensive filtering options.
        Includes order details, customer information, and payment status.

        Requires admin JWT Bearer token with order management permissions.
        Rate limited to 200 requests per minute per admin user.
      operationId: listAllOrders
      security:
        - adminBearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of orders per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [pending, confirmed, processing, shipped, delivered, cancelled]
        - name: customerId
          in: query
          description: Filter by specific customer ID
          schema:
            $ref: '#/components/schemas/ID'
        - name: fromDate
          in: query
          description: Filter orders from this date
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: toDate
          in: query
          description: Filter orders to this date
          schema:
            type: string
            format: date
            example: "2024-01-31"
        - name: minAmount
          in: query
          description: Filter orders with minimum total amount
          schema:
            type: number
            format: float
            minimum: 0
            example: 50.00
        - name: maxAmount
          in: query
          description: Filter orders with maximum total amount
          schema:
            type: number
            format: float
            minimum: 0
            example: 500.00
        - name: searchTerm
          in: query
          description: Search in order number, customer name, or email
          schema:
            type: string
            maxLength: 100
            example: "john.doe@example.com"
        - name: sortBy
          in: query
          description: Sort orders by field
          schema:
            type: string
            enum: [createdAt, updatedAt, totalAmount, orderNumber]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Orders retrieved successfully
          headers:
            X-Request-Id:
              $ref: '#/components/headers/RequestIdHeader'
            X-RateLimit-Limit:
              schema:
                type: integer
              description: Request limit per time window
            X-RateLimit-Remaining:
              schema:
                type: integer
              description: Requests remaining in current time window
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminOrderListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/orders/{id}:
    get:
      tags:
        - Admin - Order Management
      summary: Get detailed order information
      description: |
        Retrieve comprehensive details for a specific order including customer information,
        items, payment details, shipping information, and order history.

        Requires admin JWT Bearer token with order management permissions.
        Rate limited to 500 requests per minute per admin user.
      operationId: getAdminOrderDetail
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order identifier
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminOrderDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Admin - Order Management
      summary: Update order status and details
      description: |
        Update order status, shipping information, or add admin notes.
        Status changes trigger customer notifications and inventory updates.

        Requires admin JWT Bearer token with order management permissions.
        Rate limited to 100 requests per minute per admin user.
      operationId: updateOrderStatus
      security:
        - adminBearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order identifier
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminOrderUpdateRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminOrderDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Admin - Sales Analytics Endpoints
  /admin/sales/summary:
    get:
      tags:
        - Admin - Sales Analytics
      summary: Get sales summary and key metrics
      description: |
        Retrieve high-level sales metrics including total revenue, order count,
        average order value, and growth comparisons for dashboard display.

        Requires admin JWT Bearer token with analytics permissions.
        Rate limited to 100 requests per minute per admin user.
      operationId: getSalesSummary
      security:
        - adminBearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for summary
          schema:
            type: string
            enum: [today, yesterday, last_7_days, last_30_days, this_month, last_month, this_year]
            default: last_30_days
        - name: compareWith
          in: query
          description: Period to compare with for growth metrics
          schema:
            type: string
            enum: [previous_period, same_period_last_year]
            default: previous_period
      responses:
        '200':
          description: Sales summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesSummaryResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/sales/daily:
    get:
      tags:
        - Admin - Sales Analytics
      summary: Get daily sales data for charts and trends
      description: |
        Retrieve daily sales data for generating charts, trends, and analytics.
        Includes revenue, order count, and average order value by day.

        Requires admin JWT Bearer token with analytics permissions.
        Rate limited to 100 requests per minute per admin user.
      operationId: getDailySales
      security:
        - adminBearerAuth: []
      parameters:
        - name: fromDate
          in: query
          required: true
          description: Start date for data range
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: toDate
          in: query
          required: true
          description: End date for data range
          schema:
            type: string
            format: date
            example: "2024-01-31"
        - name: groupBy
          in: query
          description: Group data by time period
          schema:
            type: string
            enum: [day, week, month]
            default: day
      responses:
        '200':
          description: Daily sales data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailySalesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/sales/top-products:
    get:
      tags:
        - Admin - Sales Analytics
      summary: Get best-selling products analytics
      description: |
        Retrieve top-selling products by quantity sold, revenue generated,
        or profit margins within a specified time period.

        Requires admin JWT Bearer token with analytics permissions.
        Rate limited to 100 requests per minute per admin user.
      operationId: getTopProducts
      security:
        - adminBearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for analysis
          schema:
            type: string
            enum: [last_7_days, last_30_days, this_month, last_month, this_year]
            default: last_30_days
        - name: sortBy
          in: query
          description: Sort products by metric
          schema:
            type: string
            enum: [quantity_sold, revenue, profit, order_count]
            default: revenue
        - name: limit
          in: query
          description: Number of top products to return
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Top products data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopProductsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/customers:
    get:
      tags:
        - Admin - Customer Management
      summary: List all customers with filtering and search
      description: |
        Retrieve a paginated list of all customer accounts with comprehensive
        filtering options and search capabilities.

        Requires admin JWT Bearer token with customer management permissions.
        Rate limited to 200 requests per minute per admin user.
      operationId: listAllCustomers
      security:
        - adminBearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of customers per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: searchTerm
          in: query
          description: Search in customer name, email, or phone
          schema:
            type: string
            maxLength: 100
        - name: status
          in: query
          description: Filter by customer status
          schema:
            type: string
            enum: [active, inactive, suspended]
        - name: emailVerified
          in: query
          description: Filter by email verification status
          schema:
            type: boolean
        - name: registeredFrom
          in: query
          description: Filter customers registered from this date
          schema:
            type: string
            format: date
        - name: registeredTo
          in: query
          description: Filter customers registered to this date
          schema:
            type: string
            format: date
        - name: sortBy
          in: query
          description: Sort customers by field
          schema:
            type: string
            enum: [createdAt, lastLogin, totalOrders, totalSpent]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminCustomerListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  examples:
    # Authentication Examples
    auth_register_request:
      summary: Basic customer registration
      value:
        email: john.doe@example.com
        passwordHash: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
        firstName: John
        lastName: Doe
        phone: +1234567890
        dateOfBirth: "1990-05-15"

    auth_register_response:
      summary: Successful customer registration
      value:
        message: Account created successfully and user authenticated. Please verify your email for full activation.
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEiLCJpYXQiOjE2NDUxMjM0NTYsImV4cCI6MTY0NTEyNDM1Nn0.abc123"
        refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEiLCJpYXQiOjE2NDUxMjM0NTYsImV4cCI6MTY0NTEyNzA1Nn0.def456"
        tokenType: "Bearer"
        expiresIn: 900
        customer:
          id: "507f1f77bcf86cd799439011"
          email: john.doe@example.com
          firstName: John
          lastName: Doe
          phone: +1234567890
          dateOfBirth: "1990-05-15"
          emailVerified: false
          createdAt: "2024-01-22T10:30:00Z"
        emailVerificationSent: true
        timestamp: "2024-01-22T10:30:00Z"

    auth_login_request:
      summary: Customer login credentials
      value:
        email: john.doe@example.com
        passwordHash: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8

    auth_login_response:
      summary: Successful customer login
      value:
        message: Login successful
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEiLCJpYXQiOjE2NDUxMjM0NTYsImV4cCI6MTY0NTEyNDM1Nn0.abc123"
        refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEiLCJpYXQiOjE2NDUxMjM0NTYsImV4cCI6MTY0NTEyNzA1Nn0.def456"
        customer:
          id: "507f1f77bcf86cd799439011"
          email: john.doe@example.com
          firstName: John
          lastName: Doe
          phone: +1234567890
          dateOfBirth: "1990-05-15"
          emailVerified: true
          addresses:
            - id: "addr_123"
              type: shipping
              isDefault: true
              fullName: John Doe
              addressLine1: 123 Main Street
              city: New York
              state: NY
              postalCode: "10001"
              country: US
          lastLoginAt: "2024-01-22T10:30:00Z"
        timestamp: "2024-01-22T10:30:00Z"

    auth_password_forgot_request:
      summary: Password reset request
      value:
        email: john.doe@example.com

    auth_password_reset_request:
      summary: Password reset with token
      value:
        token: "abc123def456ghi789jkl012mno345pqr678stu901vwx234yz"
        newPasswordHash: 1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4x5y6z7a8b9c0d1e2f

    auth_oauth_request:
      summary: OAuth registration request
      value:
        code: "4/0AX4XfWjGl1..."
        redirectUri: "https://mystore.com/auth/callback"
        provider: google

    auth_token_refresh_request:
      summary: Token refresh request
      value:
        refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEiLCJpYXQiOjE2NDUxMjM0NTYsImV4cCI6MTY0NTEyNzA1Nn0.def456"

    # Customer Profile Examples
    customer_profile:
      summary: Complete customer profile
      value:
        id: "507f1f77bcf86cd799439011"
        email: john.doe@example.com
        firstName: John
        lastName: Doe
        phone: +1234567890
        dateOfBirth: "1990-05-15"
        emailVerified: true
        preferences:
          emailNotifications: true
          smsNotifications: false
          currency: USD
          language: en
        addresses:
          - id: "addr_123"
            type: shipping
            isDefault: true
            fullName: John Doe
            addressLine1: 123 Main Street
            city: New York
            state: NY
            postalCode: "10001"
            country: US
        createdAt: "2024-01-22T10:30:00Z"
        updatedAt: "2024-01-22T10:30:00Z"

    customer_profile_update:
      summary: Customer profile update request
      value:
        firstName: Jonathan
        lastName: Doe
        phone: +1234567891
        preferences:
          emailNotifications: false
          smsNotifications: true
          currency: USD
          language: en

    # Customer Address Examples
    customer_addresses_list:
      summary: Customer's saved addresses
      value:
        addresses:
          - id: "addr_123"
            type: "shipping"
            fullName: "John Doe"
            addressLine1: "123 Main Street"
            addressLine2: "Apt 4B"
            city: "New York"
            state: "NY"
            postalCode: "10001"
            country: "US"
            phone: "+1234567890"
            isDefault: true
            isValidated: true
            createdAt: "2024-01-20T08:00:00Z"
            updatedAt: "2024-01-22T10:30:00Z"
          - id: "addr_124"
            type: "billing"
            fullName: "John Doe"
            addressLine1: "123 Main Street"
            city: "New York"
            state: "NY"
            postalCode: "10001"
            country: "US"
            phone: "+1234567890"
            isDefault: true
            isValidated: true
            createdAt: "2024-01-18T14:20:00Z"
            updatedAt: "2024-01-18T14:20:00Z"
        total: 2

    address_create_request:
      summary: Add new shipping address
      value:
        type: "shipping"
        fullName: "John Doe"
        addressLine1: "456 Oak Avenue"
        addressLine2: "Suite 101"
        city: "Boston"
        state: "MA"
        postalCode: "02101"
        country: "US"
        phone: "+1617555123"
        isDefault: false

    address_create_response:
      summary: Address created successfully
      value:
        message: "Address added successfully"
        address:
          id: "addr_125"
          type: "shipping"
          fullName: "John Doe"
          addressLine1: "456 Oak Avenue"
          addressLine2: "Suite 101"
          city: "Boston"
          state: "MA"
          postalCode: "02101"
          country: "US"
          phone: "+1617555123"
          isDefault: false
          isValidated: true
          createdAt: "2024-01-22T11:00:00Z"
          updatedAt: "2024-01-22T11:00:00Z"

    address_update_request:
      summary: Update existing address
      value:
        type: "both"
        fullName: "Jonathan Doe"
        addressLine1: "789 Pine Street"
        city: "Chicago"
        state: "IL"
        postalCode: "60601"
        country: "US"
        phone: "+1312555789"
        isDefault: true

    address_update_response:
      summary: Address updated successfully
      value:
        message: "Address updated successfully"
        address:
          id: "addr_123"
          type: "both"
          fullName: "Jonathan Doe"
          addressLine1: "789 Pine Street"
          city: "Chicago"
          state: "IL"
          postalCode: "60601"
          country: "US"
          phone: "+1312555789"
          isDefault: true
          isValidated: true
          createdAt: "2024-01-20T08:00:00Z"
          updatedAt: "2024-01-22T11:15:00Z"

    # Product Examples
    product_detail:
      summary: Complete product with variants
      value:
        id: "507f1f77bcf86cd799439013"
        name: "Premium Wireless Headphones"
        description: "High-quality wireless headphones with noise cancellation and premium sound quality."
        brand: "AudioTech"
        category:
          id: "cat_electronics_001"
          name: "Electronics"
          slug: "electronics"
        slug: "premium-wireless-headphones"
        tags: ["wireless", "noise-cancellation", "premium", "bluetooth"]
        status: active
        variants:
          - id: "var_001"
            sku: "AWH-001-BLK"
            price: 299.99
            compareAtPrice: 349.99
            discount: 14.29
            colorway:
              name: "Midnight Black"
              hex: "#000000"
            weight: 250
            dimensions:
              length: 20
              width: 18
              height: 8
              unit: cm
            inventory:
              quantity: 25
              reserved: 3
              available: 22
            images:
              - "https://cdn.example.com/products/awh-001-black-1.jpg"
              - "https://cdn.example.com/products/awh-001-black-2.jpg"
          - id: "var_002"
            sku: "AWH-001-WHT"
            price: 299.99
            compareAtPrice: 349.99
            discount: 14.29
            colorway:
              name: "Pearl White"
              hex: "#FFFFFF"
            weight: 250
            dimensions:
              length: 20
              width: 18
              height: 8
              unit: cm
            inventory:
              quantity: 18
              reserved: 1
              available: 17
            images:
              - "https://cdn.example.com/products/awh-001-white-1.jpg"
              - "https://cdn.example.com/products/awh-001-white-2.jpg"
        averageRating: 4.7
        totalReviews: 234
        createdAt: "2024-01-15T08:00:00Z"
        updatedAt: "2024-01-22T10:30:00Z"

    product_list_item:
      summary: Product summary for listings
      value:
        id: "507f1f77bcf86cd799439013"
        name: "Premium Wireless Headphones"
        slug: "premium-wireless-headphones"
        brand: "AudioTech"
        category:
          id: "cat_electronics_001"
          name: "Electronics"
          slug: "electronics"
        priceRange:
          min: 299.99
          max: 299.99
          currency: "USD"
        primaryImage: "https://cdn.example.com/products/awh-001-black-1.jpg"
        averageRating: 4.7
        totalReviews: 234
        discount: 14.29
        status: active

    # Cart Examples
    cart_full:
      summary: Shopping cart with items
      value:
        id: "cart_507f1f77bcf86cd799439014"
        customerId: "507f1f77bcf86cd799439011"
        items:
          - id: "item_001"
            productId: "507f1f77bcf86cd799439013"
            variantId: "var_001"
            quantity: 1
            unitPrice: 299.99
            totalPrice: 299.99
            product:
              name: "Premium Wireless Headphones"
              slug: "premium-wireless-headphones"
              brand: "AudioTech"
              primaryImage: "https://cdn.example.com/products/awh-001-black-1.jpg"
            variant:
              sku: "AWH-001-BLK"
              colorway:
                name: "Midnight Black"
                hex: "#000000"
        totalItems: 1
        subtotal: 299.99
        estimatedTax: 24.00
        estimatedTotal: 323.99
        currency: "USD"
        createdAt: "2024-01-22T10:30:00Z"
        updatedAt: "2024-01-22T10:35:00Z"

    cart_add_item:
      summary: Add item to cart request
      value:
        productId: "507f1f77bcf86cd799439013"
        variantId: "var_001"
        quantity: 1

    # Order Examples
    order_create_request:
      summary: Order creation request
      value:
        shippingAddress:
          fullName: "John Doe"
          addressLine1: "123 Main Street"
          addressLine2: "Apt 4B"
          city: "New York"
          state: "NY"
          postalCode: "10001"
          country: "US"
          phone: "+1234567890"
        billingAddress:
          fullName: "John Doe"
          addressLine1: "123 Main Street"
          addressLine2: "Apt 4B"
          city: "New York"
          state: "NY"
          postalCode: "10001"
          country: "US"
          phone: "+1234567890"
        paymentProvider: "stripe"
        shippingMethod: "standard"
        specialInstructions: "Leave at front door"

    order_detail:
      summary: Complete order details
      value:
        id: "order_507f1f77bcf86cd799439015"
        orderNumber: "ORD-20240122-001"
        customerId: "507f1f77bcf86cd799439011"
        status: "confirmed"
        items:
          - id: "item_001"
            productId: "507f1f77bcf86cd799439013"
            variantId: "var_001"
            quantity: 1
            unitPrice: 299.99
            totalPrice: 299.99
            product:
              name: "Premium Wireless Headphones"
              slug: "premium-wireless-headphones"
              brand: "AudioTech"
              primaryImage: "https://cdn.example.com/products/awh-001-black-1.jpg"
            variant:
              sku: "AWH-001-BLK"
              colorway:
                name: "Midnight Black"
                hex: "#000000"
        subtotal: 299.99
        tax: 24.00
        shippingCost: 9.99
        total: 333.98
        currency: "USD"
        shippingAddress:
          fullName: "John Doe"
          addressLine1: "123 Main Street"
          addressLine2: "Apt 4B"
          city: "New York"
          state: "NY"
          postalCode: "10001"
          country: "US"
          phone: "+1234567890"
        billingAddress:
          fullName: "John Doe"
          addressLine1: "123 Main Street"
          addressLine2: "Apt 4B"
          city: "New York"
          state: "NY"
          postalCode: "10001"
          country: "US"
          phone: "+1234567890"
        paymentInfo:
          status: "succeeded"
          method: "card"
          last4: "4242"
          brand: "visa"
          providerAdditionalInfo:
            stripePaymentIntentId: "pi_1234567890"
            stripeChargeId: "ch_1234567890"
        shippingInfo:
          method: "standard"
          estimatedDelivery: "2024-01-25T17:00:00Z"
          providerAdditionalInfo:
            upsTrackingNumber: "1Z999AA1234567890"
        specialInstructions: "Leave at front door"
        createdAt: "2024-01-22T10:30:00Z"
        updatedAt: "2024-01-22T10:35:00Z"

    order_payment_update:
      summary: Payment information update
      value:
        paymentProvider: "stripe"
        paymentMethod: "card"
        clientSecret: "pi_1234567890_secret_abc123"

    # Admin Examples
    admin_inventory_item:
      summary: Admin inventory details
      value:
        id: "507f1f77bcf86cd799439013"
        name: "Premium Wireless Headphones"
        sku: "AWH-001"
        brand: "AudioTech"
        category:
          id: "cat_electronics_001"
          name: "Electronics"
        variants:
          - id: "var_001"
            sku: "AWH-001-BLK"
            colorway:
              name: "Midnight Black"
              hex: "#000000"
            price: 299.99
            compareAtPrice: 349.99
            costOfGoods: 150.00
            inventory:
              quantity: 25
              reserved: 3
              available: 22
              lowStockThreshold: 5
            lastRestocked: "2024-01-20T08:00:00Z"
        totalStock: 43
        lowStock: false
        createdAt: "2024-01-15T08:00:00Z"
        updatedAt: "2024-01-22T10:30:00Z"

    admin_order_detail:
      summary: Admin order with business data
      value:
        id: "order_507f1f77bcf86cd799439015"
        orderNumber: "ORD-20240122-001"
        customer:
          id: "507f1f77bcf86cd799439011"
          email: "john.doe@example.com"
          firstName: "John"
          lastName: "Doe"
          phone: "+1234567890"
          totalOrders: 5
          lifetimeValue: 1299.95
        status: "confirmed"
        items:
          - productId: "507f1f77bcf86cd799439013"
            variantId: "var_001"
            quantity: 1
            unitPrice: 299.99
            costOfGoods: 150.00
            profit: 149.99
            profitMargin: 50.0
        subtotal: 299.99
        tax: 24.00
        shippingCost: 9.99
        total: 333.98
        totalProfit: 149.99
        profitMargin: 44.9
        additionalInfo:
          internalOrderId: "INT-20240122-001"
          assignedStaff: "staff_001"
          priorityLevel: "normal"
          adminNotes: "VIP customer - expedite processing"
          fraudRiskScore: 12
        createdAt: "2024-01-22T10:30:00Z"
        updatedAt: "2024-01-22T10:35:00Z"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication

    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication
    adminBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Admin JWT Bearer token with elevated permissions

  headers:
    RequestIdHeader:
      description: Unique request identifier for tracing and debugging
      schema:
        type: string
        pattern: '^req-[a-zA-Z0-9]+$'
        example: "req-abc123def456ghi789"

  responses:
    Success:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'

    BadRequest:
      description: Bad request - invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Insufficient permissions - admin access required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    TooManyRequests:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Success:
      type: object
      required:
        - message
        - timestamp
      additionalProperties: false
      properties:
        message:
          type: string
          example: Operation completed successfully
        timestamp:
          $ref: '#/components/schemas/Timestamp'
    Error:
      type: object
      required:
        - error
        - message
        - timestamp
      additionalProperties: false
      properties:
        error:
          type: string
          description: Error code or type
          example: RESOURCE_NOT_FOUND
        message:
          type: string
          description: Human-readable error message
          example: The requested resource was not found
        details:
          type: string
          description: Additional error details
          example: Resource with ID '12345' does not exist
        timestamp:
          $ref: '#/components/schemas/Timestamp'
    ValidationError:
      type: object
      required:
        - error
        - message
        - timestamp
        - validationErrors
      additionalProperties: false
      properties:
        error:
          type: string
          description: Error code
          example: VALIDATION_FAILED
        message:
          type: string
          description: General validation error message
          example: Request validation failed
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        validationErrors:
          type: array
          description: List of specific validation errors
          items:
            $ref: '#/components/schemas/ValidationErrorDetail'

    ValidationErrorDetail:
      type: object
      required:
        - field
        - message
        - code
      additionalProperties: false
      properties:
        field:
          type: string
          description: Field that failed validation
          example: email
        message:
          type: string
          description: Validation error message
          example: Invalid email format
        code:
          type: string
          description: Validation error code
          example: INVALID_FORMAT
        rejectedValue:
          description: The value that was rejected
          example: invalid-email



    ID:
      oneOf:
        - type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: MongoDB ObjectId
          example: 507f1f77bcf86cd799439011
        - type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89aAbB][0-9a-f]{3}-[0-9a-f]{12}$'
          description: UUID v4
          example: 550e8400-e29b-41d4-a716-446655440000
        - type: string
          pattern: '^\d+$'
          description: Numeric ID
          example: 12345
      description: Universal identifier that supports MongoDB ObjectId, UUID v4, or numeric ID

    Timestamp:
      type: string
      format: date-time
      description: ISO 8601 formatted timestamp
      example: "2024-01-15T10:30:00Z"


    # Authentication Schemas
    Customer:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - emailVerified
        - createdAt
        - updatedAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        email:
          type: string
          format: email
          description: Customer's email address
          example: customer@example.com
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: Customer's first name
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: Customer's last name
          example: Doe
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Customer's phone number (E.164 format)
          example: +1234567890
        dateOfBirth:
          type: string
          format: date
          description: Customer's date of birth
          example: "1990-01-01"
        emailVerified:
          type: boolean
          description: Whether the email address has been verified
          example: true
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          description: Customer's saved addresses for shipping and billing
          example: []

    # Authentication Request Schemas
    RegisterRequest:
      type: object
      required:
        - email
        - passwordHash
        - firstName
        - lastName
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          description: Customer's email address
          example: customer@example.com
        passwordHash:
          type: string
          pattern: '^[a-fA-F0-9]{64,128}$'
          description: Hashed password using SHA-256 or similar (hex-encoded)
          example: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: Customer's first name
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: Customer's last name
          example: Doe
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Optional phone number (E.164 format)
          example: +1234567890
        dateOfBirth:
          type: string
          format: date
          description: Optional date of birth
          example: "1990-01-01"

    # Base login request properties
    BaseLoginRequest:
      type: object
      additionalProperties: false
      properties:
        rememberMe:
          type: boolean
          description: Extend session duration for this login
          default: false
          example: false

    # Email/Password specific properties
    EmailPasswordLogin:
      type: object
      required:
        - email
        - passwordHash
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          description: Customer's email address
          example: customer@example.com
        passwordHash:
          type: string
          pattern: '^[a-fA-F0-9]{64,128}$'
          description: Hashed password using SHA-256 or similar (hex-encoded)
          example: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8

    # OAuth specific properties
    OAuthLogin:
      type: object
      required:
        - provider
        - token
      additionalProperties: false
      properties:
        provider:
          type: string
          enum: [ google, facebook, linkedin ]
          description: OAuth provider name
          example: google
        token:
          type: string
          description: OAuth access token from provider
          example: "ya29.a0AfH6SMC..."

    # Unified login request using composition
    LoginRequest:
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/BaseLoginRequest'
            - $ref: '#/components/schemas/EmailPasswordLogin'
        - allOf:
            - $ref: '#/components/schemas/BaseLoginRequest'
            - $ref: '#/components/schemas/OAuthLogin'

    OAuthRegisterRequest:
      type: object
      required:
        - provider
        - token
      additionalProperties: false
      properties:
        provider:
          type: string
          enum: [ google, facebook, linkedin ]
          description: OAuth provider name
          example: google
        token:
          type: string
          description: OAuth access token from provider
          example: "ya29.a0AfH6SMC..."
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Optional phone number
          example: +1234567890
        dateOfBirth:
          type: string
          format: date
          description: Optional date of birth
          example: "1990-01-01"


    TokenRefreshRequest:
      type: object
      required:
        - refreshToken
      additionalProperties: false
      properties:
        refreshToken:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    PasswordResetRequest:
      type: object
      required:
        - email
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          description: Email address to send reset link
          example: customer@example.com

    PasswordConfirmRequest:
      type: object
      required:
        - token
        - newPasswordHash
      additionalProperties: false
      properties:
        token:
          type: string
          description: Password reset token from email
          example: abc123def456
        newPasswordHash:
          type: string
          pattern: '^[a-fA-F0-9]{64,128}$'
          description: New password hash (SHA-256 or similar, hex-encoded)
          example: ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f

    EmailVerificationRequest:
      type: object
      required:
        - token
      additionalProperties: false
      properties:
        token:
          type: string
          description: Email verification token
          example: verify123token456

    EmailResendRequest:
      type: object
      required:
        - email
      additionalProperties: false
      properties:
        email:
          type: string
          format: email
          description: Email address to resend verification
          example: customer@example.com

    ProfileUpdateRequest:
      type: object
      additionalProperties: false
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: Updated first name
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: Updated last name
          example: Doe
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Updated phone number
          example: +1234567890
        dateOfBirth:
          type: string
          format: date
          description: Updated date of birth
          example: "1990-01-01"

    # Authentication Response Schemas
    AuthResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - customer
        - timestamp
      additionalProperties: false
      properties:
        accessToken:
          type: string
          description: JWT access token (expires in 15 minutes)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: JWT refresh token (expires in 7 days)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType:
          type: string
          default: "Bearer"
          example: Bearer
        expiresIn:
          type: integer
          description: Access token expiration in seconds
          example: 900
        customer:
          $ref: '#/components/schemas/Customer'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    TokenResponse:
      type: object
      required:
        - accessToken
        - refreshToken
        - timestamp
      additionalProperties: false
      properties:
        accessToken:
          type: string
          description: New JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: New JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType:
          type: string
          default: "Bearer"
          example: Bearer
        expiresIn:
          type: integer
          description: Access token expiration in seconds
          example: 900
        timestamp:
          $ref: '#/components/schemas/Timestamp'


    RegisterResponse:
      type: object
      required:
        - message
        - accessToken
        - refreshToken
        - tokenType
        - expiresIn
        - customer
        - timestamp
      additionalProperties: false
      properties:
        message:
          type: string
          example: Account created successfully and user authenticated. Please verify your email for full activation.
        accessToken:
          type: string
          description: JWT access token for authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: JWT refresh token for renewing access token
          example: "def456ghi789jkl012mno345pqr678stu901vwx234yz"
        tokenType:
          type: string
          default: "Bearer"
          example: Bearer
        expiresIn:
          type: integer
          description: Access token expiration in seconds
          example: 900
        customer:
          $ref: '#/components/schemas/Customer'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    LogoutResponse:
      type: object
      required:
        - message
        - timestamp
      additionalProperties: false
      properties:
        message:
          type: string
          example: Logged out successfully
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    EmailVerifiedResponse:
      type: object
      required:
        - message
        - timestamp
      additionalProperties: false
      properties:
        message:
          type: string
          example: Email address verified successfully. Your account is now active.
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    EmailSentResponse:
      type: object
      required:
        - message
        - timestamp
      additionalProperties: false
      properties:
        message:
          type: string
          example: Verification email sent successfully. Please check your inbox.
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    ProfileUpdateResponse:
      type: object
      required:
        - message
        - customer
        - timestamp
      additionalProperties: false
      properties:
        message:
          type: string
          example: Profile updated successfully
        customer:
          $ref: '#/components/schemas/Customer'
        emailVerificationRequired:
          type: boolean
          description: True if email was changed and requires verification
          example: false
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    # E-commerce Schemas
    Product:
      type: object
      required:
        - id
        - name
        - priceRange
        - category
        - brand
        - inStock
        - createdAt
        - updatedAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          minLength: 1
          maxLength: 200
          description: Product name
          example: Wireless Bluetooth Headphones
        slug:
          type: string
          pattern: '^[a-z0-9-]+$'
          description: URL-friendly product identifier
          example: wireless-bluetooth-headphones
        description:
          type: string
          maxLength: 2000
          description: Detailed product description
          example: Premium wireless headphones with noise cancellation and 30-hour battery life
        shortDescription:
          type: string
          maxLength: 500
          description: Brief product summary
          example: Premium wireless headphones with noise cancellation
        priceRange:
          type: object
          required:
            - min
            - max
            - currency
          description: Price range computed from all product variants
          properties:
            min:
              type: number
              format: float
              minimum: 0
              description: Minimum price across all variants
              example: 249.99
            max:
              type: number
              format: float
              minimum: 0
              description: Maximum price across all variants
              example: 349.99
            currency:
              type: string
              description: Currency for all prices
              example: USD
        category:
          $ref: '#/components/schemas/Category'
        brand:
          $ref: '#/components/schemas/Brand'
        sku:
          type: string
          description: Stock Keeping Unit
          example: WBH-001-BK
        barcode:
          type: string
          description: Product barcode
          example: 1234567890123
        weight:
          type: number
          format: float
          minimum: 0
          description: Product weight in grams
          example: 250.5
        dimensions:
          $ref: '#/components/schemas/ProductDimensions'
        images:
          type: array
          description: Product images
          items:
            $ref: '#/components/schemas/ProductImage'
        variants:
          type: array
          description: Product variants (colorways, sizes, etc.)
          items:
            $ref: '#/components/schemas/ProductVariant'
        attributes:
          type: object
          description: Additional product attributes
          additionalProperties:
            type: string
          example:
            material: Plastic
            warranty: 2 years
            brand: TechCorp
        tags:
          type: array
          description: Product tags
          items:
            type: string
          example: [wireless, bluetooth, headphones, audio]
        inStock:
          type: boolean
          description: Whether product is in stock
          example: true
        stockQuantity:
          type: integer
          minimum: 0
          description: Available stock quantity
          example: 150
        lowStockThreshold:
          type: integer
          minimum: 0
          description: Low stock alert threshold
          example: 10
        isActive:
          type: boolean
          description: Whether product is active and visible
          example: true
        isFeatured:
          type: boolean
          description: Whether product is featured
          example: false
        seoTitle:
          type: string
          maxLength: 60
          description: SEO page title
          example: Wireless Bluetooth Headphones - Premium Audio
        seoDescription:
          type: string
          maxLength: 160
          description: SEO meta description
          example: Shop premium wireless Bluetooth headphones with noise cancellation. Free shipping and 2-year warranty.
        avgRating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          description: Average customer rating
          example: 4.5
        reviewCount:
          type: integer
          minimum: 0
          description: Number of customer reviews
          example: 127
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'


    ProductDimensions:
      type: object
      required:
        - length
        - width
        - height
        - unit
      additionalProperties: false
      properties:
        length:
          type: number
          format: float
          minimum: 0
          description: Product length
          example: 20.5
        width:
          type: number
          format: float
          minimum: 0
          description: Product width
          example: 15.3
        height:
          type: number
          format: float
          minimum: 0
          description: Product height
          example: 8.2
        unit:
          type: string
          enum: [mm, cm, in, ft]
          description: Measurement unit
          example: cm

    ProductImage:
      type: object
      required:
        - id
        - url
        - altText
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        url:
          type: string
          format: uri
          description: Image URL
          example: https://cdn.openshop.com/products/headphones-black-001.jpg
        altText:
          type: string
          description: Image alt text for accessibility
          example: Wireless Bluetooth Headphones in Midnight Black
        title:
          type: string
          description: Image title/caption
          example: Front view
        imageType:
          type: string
          enum: [main, gallery, thumbnail, zoom, lifestyle, detail, size_chart]
          description: Type of product image
          example: main
          default: gallery
        width:
          type: integer
          minimum: 1
          description: Image width in pixels
          example: 800
        height:
          type: integer
          minimum: 1
          description: Image height in pixels
          example: 600
        isPrimary:
          type: boolean
          description: Whether this is the primary product image
          example: true
        sortOrder:
          type: integer
          minimum: 0
          description: Image display order
          example: 0

    ProductVariant:
      type: object
      required:
        - id
        - name
        - price
        - currency
        - sku
        - inStock
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: Variant name (e.g., colorway, size, material combination)
          example: Black - Large
        colorway:
          $ref: '#/components/schemas/Color'
        sku:
          type: string
          description: Unique variant SKU
          example: WBH-001-BK-L
        price:
          type: number
          format: float
          minimum: 0
          description: Current selling price for this specific variant
          example: 299.99
        compareAtPrice:
          type: number
          format: float
          minimum: 0
          description: Original price before discount for this variant
          example: 399.99
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code
          example: USD
        costPrice:
          type: number
          format: float
          minimum: 0
          description: Cost price for profit calculations (admin-only field)
          example: 180.00
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          description: Images specific to this variant (colorway/style)
          minItems: 1
          maxItems: 10
        attributes:
          type: object
          description: Variant attributes
          additionalProperties:
            type: string
          example:
            size: Large
            material: Cotton
        inStock:
          type: boolean
          description: Whether variant is in stock
          example: true
        stockQuantity:
          type: integer
          minimum: 0
          description: Variant stock quantity
          example: 25

    Category:
      type: object
      required:
        - id
        - name
        - slug
        - isActive
        - createdAt
        - updatedAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Category name
          example: Electronics
        slug:
          type: string
          pattern: '^[a-z0-9-]+$'
          description: URL-friendly category identifier
          example: electronics
        description:
          type: string
          maxLength: 1000
          description: Category description
          example: Electronic devices and accessories
        parentId:
          $ref: '#/components/schemas/ID'
        image:
          $ref: '#/components/schemas/ProductImage'
        isActive:
          type: boolean
          description: Whether category is active
          example: true
        sortOrder:
          type: integer
          minimum: 0
          description: Category display order
          example: 1
        productCount:
          type: integer
          minimum: 0
          description: Number of products in category
          example: 156
        seoTitle:
          type: string
          maxLength: 60
          description: SEO page title
          example: Electronics - Shop Latest Devices
        seoDescription:
          type: string
          maxLength: 160
          description: SEO meta description
          example: Discover the latest electronics and tech accessories. Free shipping on orders over $50.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'

    Brand:
      type: object
      required:
        - id
        - name
        - slug
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Brand name
          example: TechAudio
        slug:
          type: string
          pattern: '^[a-z0-9-]+$'
          description: URL-friendly brand identifier
          example: tech-audio
        description:
          type: string
          maxLength: 1000
          description: Brand description
          example: Premium audio equipment manufacturer
        logo:
          $ref: '#/components/schemas/ProductImage'
        website:
          type: string
          format: uri
          description: Brand website URL
          example: https://www.techaudio.com

    Cart:
      type: object
      required:
        - id
        - customerId
        - items
        - summary
        - createdAt
        - updatedAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        customerId:
          $ref: '#/components/schemas/ID'
        items:
          type: array
          description: Cart items
          items:
            $ref: '#/components/schemas/CartItem'
        summary:
          $ref: '#/components/schemas/CartSummary'
        couponCode:
          type: string
          description: Applied coupon code
          example: SAVE20
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'

    CartItem:
      type: object
      required:
        - id
        - productId
        - quantity
        - unitPrice
        - totalPrice
        - addedAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        productId:
          $ref: '#/components/schemas/ID'
        variantId:
          $ref: '#/components/schemas/ID'
        product:
          $ref: '#/components/schemas/Product'
        variant:
          $ref: '#/components/schemas/ProductVariant'
        quantity:
          type: integer
          minimum: 1
          description: Item quantity
          example: 2
        unitPrice:
          type: number
          format: float
          minimum: 0
          description: Price per unit
          example: 299.99
        totalPrice:
          type: number
          format: float
          minimum: 0
          description: Total price for this item
          example: 599.98
        addedAt:
          $ref: '#/components/schemas/Timestamp'

    CartSummary:
      type: object
      required:
        - itemCount
        - subtotal
        - tax
        - total
        - currency
      additionalProperties: false
      properties:
        itemCount:
          type: integer
          minimum: 0
          description: Total number of items in cart
          example: 3
        subtotal:
          type: number
          format: float
          minimum: 0
          description: Subtotal before tax and discounts
          example: 899.97
        discount:
          type: number
          format: float
          minimum: 0
          description: Total discount amount
          example: 50.00
        tax:
          type: number
          format: float
          minimum: 0
          description: Tax amount
          example: 67.50
        shipping:
          type: number
          format: float
          minimum: 0
          description: Shipping cost
          example: 0.00
        total:
          type: number
          format: float
          minimum: 0
          description: Final total amount
          example: 917.47
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Currency code
          example: USD


    Order:
      type: object
      required:
        - id
        - orderNumber
        - customerId
        - status
        - items
        - summary
        - shippingAddress
        - billingAddress
        - createdAt
        - updatedAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        orderNumber:
          type: string
          description: Human-readable order number
          example: ORD-2024-001234
        customerId:
          $ref: '#/components/schemas/ID'
        customer:
          $ref: '#/components/schemas/Customer'
        status:
          $ref: '#/components/schemas/OrderStatus'
        items:
          type: array
          description: Order items
          items:
            $ref: '#/components/schemas/OrderItem'
        summary:
          $ref: '#/components/schemas/OrderSummary'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        notes:
          type: string
          maxLength: 500
          description: Customer notes
          example: Please leave at front door
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        transactionId:
          type: string
          description: Final payment transaction ID after completion
          example: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
        paidAt:
          type: string
          format: date-time
          description: When payment was completed
          example: "2024-01-22T14:30:00Z"
        shippingInfo:
          $ref: '#/components/schemas/ShippingInfo'
        cancelledAt:
          $ref: '#/components/schemas/Timestamp'
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'

    AdminAdditionalInfo:
      type: object
      description: Admin-specific business intelligence and operational data for orders
      additionalProperties: false
      properties:
        profit:
          type: number
          format: float
          description: Admin-only profit calculation (revenue minus cost of goods sold)
          example: 125.50
        profitMargin:
          type: number
          format: float
          description: Profit margin percentage ((profit/revenue) * 100)
          example: 35.2
        costOfGoods:
          type: number
          format: float
          description: Total cost of goods sold for this order
          example: 230.50
        adminNotes:
          type: string
          maxLength: 1000
          description: Internal admin notes for order processing, customer service, or fulfillment
          example: "Customer requested expedited shipping due to urgent need. Approved by manager."
        internalOrderId:
          type: string
          description: Internal ERP/warehouse system order identifier
          example: "WMS-789456123"
        assignedStaff:
          type: object
          description: Staff member responsible for processing this order
          properties:
            id:
              type: string
              example: "staff_12345"
            name:
              type: string
              example: "Sarah Johnson"
            department:
              type: string
              enum: [fulfillment, customer_service, shipping, returns]
              example: "fulfillment"
        priorityLevel:
          type: string
          enum: [low, normal, high, urgent]
          description: Internal processing priority level
          example: "normal"
        fraudRiskScore:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Fraud risk assessment score (0-100, higher = more risky)
          example: 12.5

    OrderItem:
      type: object
      required:
        - id
        - productId
        - quantity
        - unitPrice
        - totalPrice
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        productId:
          $ref: '#/components/schemas/ID'
        variantId:
          $ref: '#/components/schemas/ID'
        productName:
          type: string
          description: Product name at time of order
          example: Wireless Bluetooth Headphones
        productSku:
          type: string
          description: Product SKU at time of order
          example: WBH-001-BK
        variantName:
          type: string
          description: Variant name at time of order
          example: Black - Large
        quantity:
          type: integer
          minimum: 1
          description: Item quantity
          example: 1
        unitPrice:
          type: number
          format: float
          minimum: 0
          description: Price per unit at time of order
          example: 299.99
        totalPrice:
          type: number
          format: float
          minimum: 0
          description: Total price for this item
          example: 299.99
        productImage:
          $ref: '#/components/schemas/ProductImage'

    OrderSummary:
      type: object
      required:
        - itemCount
        - subtotal
        - tax
        - total
        - currency
      additionalProperties: false
      properties:
        itemCount:
          type: integer
          minimum: 1
          description: Total number of items in order
          example: 2
        subtotal:
          type: number
          format: float
          minimum: 0
          description: Subtotal before tax and discounts
          example: 599.98
        discount:
          type: number
          format: float
          minimum: 0
          description: Total discount amount
          example: 30.00
        tax:
          type: number
          format: float
          minimum: 0
          description: Tax amount
          example: 45.60
        shipping:
          type: number
          format: float
          minimum: 0
          description: Shipping cost
          example: 9.99
        total:
          type: number
          format: float
          minimum: 0
          description: Final total amount
          example: 625.57
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Currency code
          example: USD

    WishlistSummary:
      type: object
      required:
        - totalItems
        - totalValue
        - currency
      additionalProperties: false
      properties:
        totalItems:
          type: integer
          minimum: 0
          description: Total number of items in wishlist
          example: 2
        totalValue:
          type: number
          format: float
          minimum: 0
          description: Total value of all items in wishlist
          example: 219.98
        inStockItems:
          type: integer
          minimum: 0
          description: Number of items currently in stock
          example: 2
        outOfStockItems:
          type: integer
          minimum: 0
          description: Number of items currently out of stock
          example: 0
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Currency code
          example: USD

    OrderStatus:
      type: string
      enum:
        - pending
        - confirmed
        - processing
        - shipped
        - delivered
        - cancelled
      description: Order status
      example: confirmed

    Address:
      type: object
      required:
        - addressLine1
        - city
        - postalCode
        - country
      anyOf:
        - required: [fullName]
        - required: [firstName, lastName]
      additionalProperties: false
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: First name
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: Last name
          example: Doe
        company:
          type: string
          maxLength: 100
          description: Company name
          example: Acme Corporation
        addressLine1:
          type: string
          minLength: 1
          maxLength: 100
          description: Street address line 1
          example: 123 Main Street
        addressLine2:
          type: string
          maxLength: 100
          description: Street address line 2
          example: Apt 4B
        city:
          type: string
          minLength: 1
          maxLength: 50
          description: City
          example: New York
        state:
          type: string
          maxLength: 50
          description: State or province
          example: NY
        postalCode:
          type: string
          minLength: 1
          maxLength: 20
          description: Postal or ZIP code
          example: 10001
        country:
          type: string
          pattern: '^[A-Z]{2}$'
          description: ISO 3166-1 alpha-2 country code
          example: US
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Contact phone number (E.164 format)
          example: "+1234567890"
        id:
          type: string
          description: Unique address identifier (only for saved addresses)
          example: "addr_123"
        type:
          type: string
          enum: [shipping, billing, both]
          description: Address type for specific use cases (only for saved addresses)
          example: shipping
        fullName:
          type: string
          minLength: 1
          maxLength: 100
          description: Full name (alternative to firstName + lastName)
          example: "John Doe"
        isDefault:
          type: boolean
          description: Whether this is the default address for its type (only for saved addresses)
          example: true
        isValidated:
          type: boolean
          description: Whether the address has been validated by postal service (only for saved addresses)
          example: true
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'

    Review:
      type: object
      required:
        - id
        - productId
        - customerId
        - rating
        - title
        - comment
        - isVerified
        - createdAt
        - updatedAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        productId:
          $ref: '#/components/schemas/ID'
        customerId:
          $ref: '#/components/schemas/ID'
        customerName:
          type: string
          description: Customer display name
          example: John D.
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating from 1 to 5 stars
          example: 5
        title:
          type: string
          minLength: 1
          maxLength: 100
          description: Review title
          example: Excellent sound quality!
        comment:
          type: string
          minLength: 1
          maxLength: 2000
          description: Review comment
          example: These headphones exceeded my expectations. The sound quality is amazing and the battery life is excellent.
        pros:
          type: array
          description: Product pros mentioned in review
          items:
            type: string
          example: ["Great sound quality", "Long battery life", "Comfortable fit"]
        cons:
          type: array
          description: Product cons mentioned in review
          items:
            type: string
          example: ["A bit pricey"]
        isVerified:
          type: boolean
          description: Whether this is a verified purchase review
          example: true
        helpfulCount:
          type: integer
          minimum: 0
          description: Number of users who found this review helpful
          example: 23
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'

    ReviewSummary:
      type: object
      required:
        - totalReviews
        - averageRating
        - ratingDistribution
      additionalProperties: false
      properties:
        totalReviews:
          type: integer
          minimum: 0
          description: Total number of reviews
          example: 127
        averageRating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          description: Average rating
          example: 4.2
        ratingDistribution:
          $ref: '#/components/schemas/RatingDistribution'

    RatingDistribution:
      type: object
      required:
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
      additionalProperties: false
      properties:
        "1":
          type: integer
          minimum: 0
          description: Number of 1-star reviews
          example: 3
        "2":
          type: integer
          minimum: 0
          description: Number of 2-star reviews
          example: 5
        "3":
          type: integer
          minimum: 0
          description: Number of 3-star reviews
          example: 12
        "4":
          type: integer
          minimum: 0
          description: Number of 4-star reviews
          example: 45
        "5":
          type: integer
          minimum: 0
          description: Number of 5-star reviews
          example: 62

    Wishlist:
      type: object
      required:
        - id
        - customerId
        - items
        - createdAt
        - updatedAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        customerId:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          maxLength: 100
          description: Wishlist name
          example: My Wishlist
        items:
          type: array
          description: Wishlist items
          items:
            $ref: '#/components/schemas/WishlistItem'
        isPublic:
          type: boolean
          description: Whether wishlist is publicly viewable
          example: false
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'

    WishlistItem:
      type: object
      required:
        - id
        - productId
        - addedAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        productId:
          $ref: '#/components/schemas/ID'
        variantId:
          $ref: '#/components/schemas/ID'
        product:
          $ref: '#/components/schemas/Product'
        variant:
          $ref: '#/components/schemas/ProductVariant'
        notes:
          type: string
          maxLength: 500
          description: Customer notes about the item
          example: Want this for my birthday
        addedAt:
          $ref: '#/components/schemas/Timestamp'

    # Admin - Inventory Management Schemas
    ProductInventory:
      type: object
      description: |
        Complete product with inventory management data for admin operations.
        Contains all product and variant information plus inventory-specific fields.
      required:
        - id
        - name
        - sku
        - colorway
        - price
        - currency
        - product
        - inventoryDetails
        - financialDetails
        - supplier
        - lastUpdated
      additionalProperties: false
      properties:
        # Core variant properties (from ProductVariant)
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: Variant name (e.g., colorway, size, material combination)
          example: Black - Large
        sku:
          type: string
          description: Unique variant SKU
          example: WBH-001-BK-L
        colorway:
          $ref: '#/components/schemas/Color'
        size:
          type: string
          description: Size of the variant
          example: Large
        weight:
          type: number
          format: float
          minimum: 0
          description: Weight in grams
          example: 250.5
        dimensions:
          $ref: '#/components/schemas/ProductDimensions'
        material:
          type: string
          description: Primary material
          example: Premium Plastic

        # Pricing (from ProductVariant)
        price:
          type: number
          format: float
          minimum: 0
          description: Current selling price for this specific variant
          example: 299.99
        compareAtPrice:
          type: number
          format: float
          minimum: 0
          description: Original price before discount for this variant
          example: 399.99
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code
          example: USD

        # Product context
        product:
          type: object
          description: Essential product information for inventory context
          required:
            - id
            - name
            - brand
            - category
            - status
          properties:
            id:
              $ref: '#/components/schemas/ID'
            name:
              type: string
              description: Product name
              example: Wireless Bluetooth Headphones
            brand:
              type: string
              description: Product brand
              example: TechCorp
            category:
              $ref: '#/components/schemas/Category'
            status:
              type: string
              enum: [active, inactive, draft, archived]
              description: Product status
              example: active
            description:
              type: string
              description: Product description
              example: Premium wireless headphones with noise cancellation
            tags:
              type: array
              items:
                type: string
              description: Product tags
              example: [wireless, bluetooth, headphones, audio]

        # Images and media (from ProductVariant)
        images:
          type: array
          description: Images specific to this variant (colorway/style)
          items:
            $ref: '#/components/schemas/ProductImage'

        # Variant attributes (from ProductVariant)
        attributes:
          type: object
          description: Variant attributes
          additionalProperties:
            type: string
          example:
            size: Large
            material: Cotton

        # Customer-visible stock info (from ProductVariant)
        inStock:
          type: boolean
          description: Whether variant is in stock
          example: true

        # Inventory management details
        inventoryDetails:
          type: object
          description: Detailed inventory information for admin operations
          required:
            - stockQuantity
            - minimumThreshold
            - costPrice
            - supplier
            - status
          properties:
            stockQuantity:
              type: integer
              minimum: 0
              description: Current stock level
              example: 45
            reservedQuantity:
              type: integer
              minimum: 0
              description: Quantity reserved for pending orders
              example: 5
            availableQuantity:
              type: integer
              minimum: 0
              description: Available quantity (stock - reserved)
              example: 40
            minimumThreshold:
              type: integer
              minimum: 0
              description: Minimum stock level before reorder alert
              example: 10
            reorderQuantity:
              type: integer
              minimum: 0
              description: Suggested reorder quantity
              example: 50
            status:
              type: string
              enum: [active, discontinued, out_of_stock, backordered]
              description: Inventory status
              example: active
            location:
              type: string
              description: Storage location
              example: Warehouse A - Shelf B3

        # Financial details for admin
        financialDetails:
          type: object
          description: Cost and profit information for admin operations
          required:
            - costPrice
          properties:
            costPrice:
              type: number
              format: float
              minimum: 0
              description: Wholesale/cost price for this variant
              example: 149.99
            profitMargin:
              type: number
              format: float
              minimum: 0
              description: Profit margin percentage
              example: 50.0
            averageCost:
              type: number
              format: float
              minimum: 0
              description: Average cost price over time
              example: 145.50

        # Supplier information
        supplier:
          $ref: '#/components/schemas/Supplier'

        # Timestamps
        lastRestocked:
          type: string
          format: date-time
          description: Last restock date
          example: "2024-01-15T14:30:00Z"
        lastUpdated:
          type: string
          format: date-time
          description: Last inventory update timestamp
          example: "2024-01-22T09:45:00Z"

    InventoryListResponse:
      type: object
      required:
        - inventory
        - pagination
        - timestamp
      additionalProperties: false
      properties:
        inventory:
          type: array
          items:
            $ref: '#/components/schemas/ProductInventory'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    InventoryUpdateRequest:
      type: object
      additionalProperties: false
      properties:
        stockQuantity:
          type: integer
          minimum: 0
          description: Update stock quantity
          example: 100
        minimumThreshold:
          type: integer
          minimum: 0
          description: Update minimum threshold
          example: 15
        costPrice:
          type: number
          format: float
          minimum: 0
          description: Update wholesale/cost price
          example: 149.99
        sellingPrice:
          type: number
          format: float
          minimum: 0
          description: Update retail selling price
          example: 299.99
        compareAtPrice:
          type: number
          format: float
          minimum: 0
          description: Update original price before discount
          example: 399.99
        supplierId:
          $ref: '#/components/schemas/ID'
        status:
          type: string
          enum: [active, discontinued, out_of_stock, backordered]
          description: Update inventory status
          example: active
        location:
          type: string
          description: Update storage location
          example: Warehouse A - Shelf C1

    StockAdjustmentRequest:
      type: object
      required:
        - adjustmentType
        - quantity
        - reason
      additionalProperties: false
      properties:
        adjustmentType:
          type: string
          enum: [increase, decrease]
          description: Type of stock adjustment
          example: increase
        quantity:
          type: integer
          minimum: 1
          description: Quantity to adjust (positive number)
          example: 25
        reason:
          type: string
          enum: [restock, damage, theft, audit_correction, return, expired, manual_count]
          description: Reason for adjustment
          example: restock
        reference:
          type: string
          maxLength: 100
          description: Reference number (PO, invoice, etc.)
          example: PO-2024-001
        notes:
          type: string
          maxLength: 500
          description: Additional notes about the adjustment
          example: Restocked from supplier after quality check

    StockAdjustmentResponse:
      type: object
      required:
        - adjustmentId
        - productId
        - adjustmentType
        - quantity
        - reason
        - previousQuantity
        - newQuantity
        - timestamp
        - adminUser
      additionalProperties: false
      properties:
        adjustmentId:
          $ref: '#/components/schemas/ID'
        productId:
          $ref: '#/components/schemas/ID'
        adjustmentType:
          type: string
          enum: [increase, decrease]
          example: increase
        quantity:
          type: integer
          example: 25
        reason:
          type: string
          enum: [restock, damage, theft, audit_correction, return, expired, manual_count]
          example: restock
        reference:
          type: string
          example: PO-2024-001
        notes:
          type: string
          example: Restocked from supplier after quality check
        previousQuantity:
          type: integer
          description: Stock quantity before adjustment
          example: 45
        newQuantity:
          type: integer
          description: Stock quantity after adjustment
          example: 70
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        adminUser:
          type: string
          description: Admin user who made the adjustment
          example: admin@openshop.com

    StockHistoryResponse:
      type: object
      required:
        - productId
        - movements
        - pagination
        - timestamp
      additionalProperties: false
      properties:
        productId:
          $ref: '#/components/schemas/ID'
        movements:
          type: array
          items:
            $ref: '#/components/schemas/StockMovement'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    StockMovement:
      type: object
      required:
        - id
        - movementType
        - quantity
        - previousQuantity
        - newQuantity
        - timestamp
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        movementType:
          type: string
          enum: [adjustment, sale, restock, return, damage, audit]
          description: Type of stock movement
          example: sale
        quantity:
          type: integer
          description: Quantity moved (positive for increase, negative for decrease)
          example: -2
        previousQuantity:
          type: integer
          description: Stock level before movement
          example: 47
        newQuantity:
          type: integer
          description: Stock level after movement
          example: 45
        reason:
          type: string
          description: Reason for the movement
          example: Customer order #12345
        reference:
          type: string
          description: Reference number or identifier
          example: ORDER-12345
        adminUser:
          type: string
          description: Admin user who triggered the movement
          example: system@openshop.com
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    LowStockResponse:
      type: object
      required:
        - products
        - pagination
        - summary
        - timestamp
      additionalProperties: false
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/LowStockItem'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        summary:
          type: object
          properties:
            criticalCount:
              type: integer
              description: Products with zero or negative stock
              example: 3
            lowCount:
              type: integer
              description: Products below minimum threshold
              example: 12
            warningCount:
              type: integer
              description: Products approaching minimum threshold
              example: 8
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    LowStockItem:
      type: object
      required:
        - id
        - name
        - sku
        - stockQuantity
        - minimumThreshold
        - severity
        - daysOutOfStock
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          example: Wireless Bluetooth Headphones - Black Large
        sku:
          type: string
          example: WBH-001-BLK-L
        productId:
          $ref: '#/components/schemas/ID'
        variantId:
          $ref: '#/components/schemas/ID'
        colorway:
          $ref: '#/components/schemas/Color'
        stockQuantity:
          type: integer
          example: 3
        minimumThreshold:
          type: integer
          example: 10
        severity:
          type: string
          enum: [critical, low, warning]
          description: Stock level severity
          example: low
        daysOutOfStock:
          type: integer
          description: Days the item has been out of stock (0 if in stock)
          example: 0
        supplier:
          $ref: '#/components/schemas/Supplier'

    BulkInventoryUpdateRequest:
      type: object
      required:
        - updates
      additionalProperties: false
      properties:
        updates:
          type: array
          items:
            type: object
            required:
              - productId
            additionalProperties: false
            properties:
              productId:
                $ref: '#/components/schemas/ID'
              stockQuantity:
                type: integer
                minimum: 0
                example: 100
              minimumThreshold:
                type: integer
                minimum: 0
                example: 15
              costPrice:
                type: number
                format: float
                minimum: 0
                example: 149.99
              sellingPrice:
                type: number
                format: float
                minimum: 0
                example: 299.99
              compareAtPrice:
                type: number
                format: float
                minimum: 0
                example: 399.99
              status:
                type: string
                enum: [active, discontinued, out_of_stock, backordered]
                example: active
        notes:
          type: string
          maxLength: 500
          description: Notes about the bulk update
          example: Quarterly inventory update from audit

    BulkInventoryUpdateResponse:
      type: object
      required:
        - totalRequested
        - successCount
        - failureCount
        - results
        - timestamp
      additionalProperties: false
      properties:
        totalRequested:
          type: integer
          description: Total number of products requested to update
          example: 100
        successCount:
          type: integer
          description: Number of successfully updated products
          example: 98
        failureCount:
          type: integer
          description: Number of failed updates
          example: 2
        results:
          type: array
          items:
            type: object
            required:
              - productId
              - status
            properties:
              productId:
                $ref: '#/components/schemas/ID'
              status:
                type: string
                enum: [success, failed]
                example: success
              error:
                type: string
                description: Error message if status is failed
                example: Product not found
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    InventoryAlertsResponse:
      type: object
      required:
        - alerts
        - summary
        - timestamp
      additionalProperties: false
      properties:
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/InventoryAlert'
        summary:
          type: object
          properties:
            totalAlerts:
              type: integer
              example: 15
            criticalAlerts:
              type: integer
              example: 3
            unacknowledgedAlerts:
              type: integer
              example: 8
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    InventoryAlert:
      type: object
      required:
        - id
        - productId
        - alertType
        - severity
        - message
        - createdAt
        - acknowledged
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        productId:
          $ref: '#/components/schemas/ID'
        productName:
          type: string
          example: Wireless Bluetooth Headphones
        alertType:
          type: string
          enum: [low_stock, overstock, unusual_movement, expired, damaged]
          description: Type of inventory alert
          example: low_stock
        severity:
          type: string
          enum: [critical, high, medium, low]
          description: Alert severity level
          example: high
        message:
          type: string
          description: Human-readable alert message
          example: Stock level (5) is below minimum threshold (10)
        acknowledged:
          type: boolean
          description: Whether the alert has been acknowledged
          example: false
        acknowledgedBy:
          type: string
          description: Admin user who acknowledged the alert
          example: admin@openshop.com
        acknowledgedAt:
          type: string
          format: date-time
          description: When the alert was acknowledged
          example: "2024-01-22T10:30:00Z"
        createdAt:
          type: string
          format: date-time
          description: When the alert was created
          example: "2024-01-20T08:15:00Z"

    Color:
      type: object
      required:
        - name
        - hex
        - family
      additionalProperties: false
      properties:
        name:
          type: string
          description: Human-readable color name
          example: Midnight Black
        hex:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          description: Hex color code for UI swatches and color pickers
          example: "#1a1a1a"
        family:
          type: string
          enum: [black, white, gray, red, blue, green, yellow, orange, purple, pink, brown, navy, rose_gold, mint, coral, burgundy, multicolor]
          description: General color family for filtering and categorization
          example: black
        code:
          type: string
          maxLength: 20
          description: Manufacturer or internal color code
          example: MBK001
        description:
          type: string
          maxLength: 200
          description: Marketing description of the color
          example: Deep, rich black with subtle blue undertones for a premium look
        isLimitedEdition:
          type: boolean
          description: Whether this color is a limited or special edition
          default: false
          example: false
        seasonalAvailability:
          type: array
          items:
            type: string
            enum: [spring, summer, fall, winter, year_round]
          description: Seasons when this color is typically available
          example: ["year_round"]
        primaryColor:
          type: string
          description: Primary color for multi-color variants
          example: blue
        secondaryColors:
          type: array
          items:
            type: string
          description: Secondary/accent colors for patterns or multi-color products
          example: ["white", "red"]
          maxItems: 5

    Supplier:
      type: object
      required:
        - id
        - name
        - contactEmail
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: Supplier name
          example: Tech Supplies Inc.
        contactEmail:
          type: string
          format: email
          description: Primary contact email
          example: orders@techsupplies.com
        contactPhone:
          type: string
          description: Primary contact phone
          example: +1-555-0123

    # Admin - Order and Sales Management Schemas
    AdminOrderListResponse:
      type: object
      required:
        - orders
        - pagination
        - summary
        - timestamp
      additionalProperties: false
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/AdminOrderSummary'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        summary:
          type: object
          properties:
            totalOrders:
              type: integer
              example: 1250
            totalRevenue:
              type: number
              format: float
              example: 125000.50
            averageOrderValue:
              type: number
              format: float
              example: 100.00
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    AdminOrderSummary:
      type: object
      required:
        - id
        - orderNumber
        - customer
        - status
        - totalAmount
        - createdAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        orderNumber:
          type: string
          example: ORD-2024-001234
        customer:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/ID'
            name:
              type: string
              example: John Doe
            email:
              type: string
              format: email
              example: john.doe@example.com
        status:
          $ref: '#/components/schemas/OrderStatus'
        totalAmount:
          type: number
          format: float
          example: 299.99
        currency:
          type: string
          example: USD
        itemCount:
          type: integer
          example: 3
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'

    AdminOrderDetail:
      type: object
      description: Admin view of order combining base Order data with business intelligence and operational details
      allOf:
        - $ref: '#/components/schemas/Order'
        - $ref: '#/components/schemas/AdminAdditionalInfo'

    AdminOrderUpdateRequest:
      type: object
      additionalProperties: false
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'
        shippingUpdate:
          $ref: '#/components/schemas/ShippingInfo'
        adminNotes:
          type: string
          maxLength: 1000
          example: Customer contacted about delivery delay
        notifyCustomer:
          type: boolean
          description: Send notification email to customer about status change
          default: true

    SalesSummaryResponse:
      type: object
      required:
        - metrics
        - comparison
        - timestamp
      additionalProperties: false
      properties:
        metrics:
          type: object
          properties:
            totalRevenue:
              type: number
              format: float
              example: 125000.50
            totalOrders:
              type: integer
              example: 1250
            averageOrderValue:
              type: number
              format: float
              example: 100.00
            totalProfit:
              type: number
              format: float
              example: 45000.25
            profitMargin:
              type: number
              format: float
              description: Profit margin percentage
              example: 36.0
            newCustomers:
              type: integer
              example: 180
            returningCustomers:
              type: integer
              example: 320
        comparison:
          type: object
          properties:
            revenueGrowth:
              type: number
              format: float
              description: Revenue growth percentage vs comparison period
              example: 15.5
            orderGrowth:
              type: number
              format: float
              description: Order count growth percentage
              example: 12.3
            avgOrderValueGrowth:
              type: number
              format: float
              example: 2.8
        period:
          type: object
          properties:
            current:
              type: string
              example: "Last 30 days"
            comparison:
              type: string
              example: "Previous 30 days"
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    DailySalesResponse:
      type: object
      required:
        - salesData
        - summary
        - timestamp
      additionalProperties: false
      properties:
        salesData:
          type: array
          items:
            $ref: '#/components/schemas/DailySalesData'
        summary:
          type: object
          properties:
            totalRevenue:
              type: number
              format: float
              example: 12500.50
            totalOrders:
              type: integer
              example: 125
            averageOrderValue:
              type: number
              format: float
              example: 100.00
            highestDay:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  example: "2024-01-15"
                revenue:
                  type: number
                  format: float
                  example: 850.25
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    DailySalesData:
      type: object
      required:
        - date
        - revenue
        - orderCount
        - averageOrderValue
      additionalProperties: false
      properties:
        date:
          type: string
          format: date
          example: "2024-01-15"
        revenue:
          type: number
          format: float
          example: 850.25
        orderCount:
          type: integer
          example: 12
        averageOrderValue:
          type: number
          format: float
          example: 70.85
        newCustomers:
          type: integer
          example: 3
        returningCustomers:
          type: integer
          example: 9

    TopProductsResponse:
      type: object
      required:
        - products
        - summary
        - timestamp
      additionalProperties: false
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/TopProductData'
        summary:
          type: object
          properties:
            totalProducts:
              type: integer
              example: 10
            totalRevenue:
              type: number
              format: float
              example: 45000.25
            totalQuantitySold:
              type: integer
              example: 450
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    TopProductData:
      type: object
      required:
        - productId
        - name
        - quantitySold
        - revenue
        - orderCount
      additionalProperties: false
      properties:
        productId:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          example: Wireless Bluetooth Headphones
        sku:
          type: string
          example: WBH-001-BLK
        quantitySold:
          type: integer
          example: 125
        revenue:
          type: number
          format: float
          example: 37487.50
        profit:
          type: number
          format: float
          example: 18743.75
        orderCount:
          type: integer
          description: Number of orders containing this product
          example: 98
        averagePrice:
          type: number
          format: float
          example: 299.90
        category:
          type: string
          example: Electronics

    AdminCustomerListResponse:
      type: object
      required:
        - customers
        - pagination
        - summary
        - timestamp
      additionalProperties: false
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/AdminCustomerSummary'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        summary:
          type: object
          properties:
            totalCustomers:
              type: integer
              example: 2500
            activeCustomers:
              type: integer
              example: 2350
            newThisMonth:
              type: integer
              example: 180
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    AdminCustomerSummary:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - status
        - totalOrders
        - totalSpent
        - createdAt
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/ID'
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        phone:
          type: string
          example: +1234567890
        status:
          type: string
          enum: [active, inactive, suspended]
          example: active
        emailVerified:
          type: boolean
          example: true
        totalOrders:
          type: integer
          description: Total number of orders placed
          example: 15
        totalSpent:
          type: number
          format: float
          description: Total amount spent by customer
          example: 1250.75
        averageOrderValue:
          type: number
          format: float
          example: 83.38
        lastLogin:
          type: string
          format: date-time
          example: "2024-01-20T14:30:00Z"
        lastOrderDate:
          type: string
          format: date-time
          example: "2024-01-18T10:15:00Z"
        createdAt:
          $ref: '#/components/schemas/Timestamp'

    # Request/Response Schemas for E-commerce APIs


    ProductSearchResponse:
      type: object
      required:
        - products
        - searchInfo
        - pagination
        - timestamp
      additionalProperties: false
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        searchInfo:
          $ref: '#/components/schemas/SearchInfo'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        timestamp:
          $ref: '#/components/schemas/Timestamp'




    AddToCartRequest:
      type: object
      required:
        - productId
        - quantity
      additionalProperties: false
      properties:
        productId:
          $ref: '#/components/schemas/ID'
        variantId:
          $ref: '#/components/schemas/ID'
        quantity:
          type: integer
          minimum: 1
          maximum: 100
          description: Quantity to add
          example: 2

    UpdateCartItemRequest:
      type: object
      required:
        - quantity
      additionalProperties: false
      properties:
        quantity:
          type: integer
          minimum: 1
          maximum: 100
          description: New quantity
          example: 3



    CreateOrderRequest:
      type: object
      required:
        - shippingAddress
        - billingAddress
        - paymentMethod
      additionalProperties: false
      properties:
        shippingAddress:
          $ref: '#/components/schemas/Address'
          description: Complete shipping address (duplicated from saved address if applicable)
        billingAddress:
          $ref: '#/components/schemas/Address'
          description: Complete billing address (duplicated from saved address if applicable)
        paymentMethod:
          type: string
          enum: [credit_card, debit_card, paypal, apple_pay, google_pay, stripe, square]
          description: Preferred payment method for payment intent creation
          example: credit_card
        paymentProvider:
          type: string
          enum: [stripe, paypal, square, braintree, adyen]
          description: Preferred payment provider (optional, defaults based on method)
          example: stripe
        notes:
          type: string
          maxLength: 500
          description: Order notes
          example: Please leave at front door

    CreateOrderResponse:
      type: object
      description: Response when order is created with payment intent
      required:
        - order
        - paymentInfo
        - timestamp
      additionalProperties: false
      properties:
        message:
          type: string
          example: Order created successfully. Complete payment to confirm.
        order:
          $ref: '#/components/schemas/Order'
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    UpdateReviewRequest:
      type: object
      additionalProperties: false
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Updated rating
          example: 4
        title:
          type: string
          minLength: 1
          maxLength: 100
          description: Updated title
          example: Good product overall
        comment:
          type: string
          minLength: 1
          maxLength: 2000
          description: Updated comment
          example: Still a good product, but noticed some minor issues.
        pros:
          type: array
          items:
            type: string
          example: [Good quality, Decent price]
        cons:
          type: array
          items:
            type: string
          example: [Minor build quality issues]



    # Utility Schemas
    PaginationInfo:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
        - hasNext
        - hasPrev
      additionalProperties: false
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          description: Items per page
          example: 20
        total:
          type: integer
          minimum: 0
          description: Total number of items
          example: 156
        totalPages:
          type: integer
          minimum: 0
          description: Total number of pages
          example: 8
        hasNext:
          type: boolean
          description: Whether there is a next page
          example: true
        hasPrev:
          type: boolean
          description: Whether there is a previous page
          example: false
        nextCursor:
          type: string
          description: Cursor for next page
          example: eyJpZCI6IjEyMzQ1In0
        prevCursor:
          type: string
          description: Cursor for previous page
          example: eyJpZCI6IjEyMzQ0In0

    SearchInfo:
      type: object
      required:
        - query
        - resultCount
        - searchTime
      additionalProperties: false
      properties:
        query:
          type: string
          description: Search query
          example: wireless headphones
        resultCount:
          type: integer
          minimum: 0
          description: Number of search results
          example: 42
        searchTime:
          type: number
          format: float
          minimum: 0
          description: Search execution time in milliseconds
          example: 23.5
        suggestions:
          type: array
          items:
            type: string
          description: Search suggestions
          example: [wireless earbuds, bluetooth headphones, noise cancelling headphones]

    # Missing Response Schemas
    CategoryProductsResponse:
      type: object
      required:
        - category
        - products
        - pagination
        - timestamp
      additionalProperties: false
      properties:
        category:
          $ref: '#/components/schemas/Category'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        timestamp:
          $ref: '#/components/schemas/Timestamp'


    # Additional Missing Schemas

    CancelOrderRequest:
      type: object
      additionalProperties: false
      properties:
        reason:
          type: string
          maxLength: 500
          description: Reason for cancellation
          example: Changed my mind


    ProductReviewsResponse:
      type: object
      required:
        - reviews
        - summary
        - pagination
        - timestamp
      additionalProperties: false
      properties:
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        summary:
          $ref: '#/components/schemas/ReviewSummary'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    AddReviewRequest:
      type: object
      required:
        - rating
        - title
        - comment
      additionalProperties: false
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating from 1 to 5 stars
          example: 5
        title:
          type: string
          minLength: 1
          maxLength: 100
          description: Review title
          example: Excellent product!
        comment:
          type: string
          minLength: 1
          maxLength: 2000
          description: Review comment
          example: This product exceeded my expectations in every way.
        pros:
          type: array
          items:
            type: string
          example: [Great quality, Fast shipping]
        cons:
          type: array
          items:
            type: string
          example: [Slightly expensive]

    AddReviewFormRequest:
      type: object
      required:
        - rating
        - title
        - comment
      additionalProperties: false
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating from 1 to 5 stars
          example: 5
        title:
          type: string
          minLength: 1
          maxLength: 100
          description: Review title
          example: Great product!
        comment:
          type: string
          minLength: 1
          maxLength: 2000
          description: Review comment
          example: Really happy with this purchase.

    UpdateReviewFormRequest:
      type: object
      additionalProperties: false
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Updated rating
          example: 4
        title:
          type: string
          minLength: 1
          maxLength: 100
          description: Updated title
          example: Good product overall
        comment:
          type: string
          minLength: 1
          maxLength: 2000
          description: Updated comment
          example: Still a good product, but noticed some minor issues.

    AddWishlistItemRequest:
      type: object
      required:
        - productId
      additionalProperties: false
      properties:
        productId:
          $ref: '#/components/schemas/ID'
        variantId:
          $ref: '#/components/schemas/ID'
        notes:
          type: string
          maxLength: 500
          description: Optional notes
          example: Want this for Christmas



    # Simple message responses for actions
    CartActionResponse:
      type: object
      required:
        - message
      additionalProperties: false
      properties:
        message:
          type: string
          example: Cart action completed successfully
        cartItem:
          $ref: '#/components/schemas/CartItem'
        cart:
          $ref: '#/components/schemas/CartSummary'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    OrderActionResponse:
      type: object
      required:
        - message
      additionalProperties: false
      properties:
        message:
          type: string
          example: Order action completed successfully
        order:
          $ref: '#/components/schemas/OrderSummary'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    WishlistActionResponse:
      type: object
      required:
        - message
      additionalProperties: false
      properties:
        message:
          type: string
          example: Wishlist action completed successfully
        wishlistItem:
          $ref: '#/components/schemas/WishlistItem'
        wishlist:
          $ref: '#/components/schemas/WishlistSummary'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    # Order Payment Request Schemas
    UpdateOrderPaymentRequest:
      type: object
      description: Request body for updating order payment information
      required:
        - status
      additionalProperties: false
      properties:
        status:
          type: string
          enum: [pending_payment, processing, paid, failed, cancelled, disputed]
          description: New payment status
          example: paid
        transactionId:
          type: string
          maxLength: 200
          description: Payment provider transaction ID
          example: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
        provider:
          type: string
          maxLength: 50
          description: Payment provider/gateway
          example: stripe
        amount:
          type: number
          format: float
          minimum: 0
          description: Payment amount (required for successful payments)
          example: 299.99
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Currency code (required for payments)
          example: USD
        paidAt:
          type: string
          format: date-time
          description: When payment was completed
          example: "2024-01-22T14:30:00Z"
        failureReason:
          type: string
          maxLength: 500
          description: Reason for payment failure (required for failed status)
          example: insufficient_funds
        paymentMeta:
          type: object
          description: Additional payment metadata from provider
          additionalProperties: true
          example:
            last4: "4242"
            brand: visa
            exp_month: 12
            exp_year: 2025

    ConfirmOrderPaymentRequest:
      type: object
      description: Request body for confirming order payment
      required:
        - transactionId
        - provider
        - amount
        - currency
      additionalProperties: false
      properties:
        transactionId:
          type: string
          maxLength: 200
          description: Payment provider transaction ID
          example: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
        provider:
          type: string
          enum: [stripe, paypal, square, braintree, authorize_net, adyen, klarna, afterpay]
          description: Payment provider/gateway
          example: stripe
        amount:
          type: number
          format: float
          minimum: 0
          description: Confirmed payment amount
          example: 299.99
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Payment currency
          example: USD
        paymentMethod:
          type: string
          enum: [credit_card, debit_card, paypal, apple_pay, google_pay, bank_transfer, cash_on_delivery]
          description: Payment method used
          example: credit_card
        paymentMeta:
          type: object
          description: Additional payment metadata from provider
          additionalProperties: true
          example:
            payment_method: pm_1MqxDr2eZvKYlo2C0J8yQZ7P
            last4: "4242"
            brand: visa
            exp_month: 12
            exp_year: 2025

    # Payment Response Schemas
    PaymentInfo:
      type: object
      description: Core payment information for order processing
      required:
        - provider
        - amount
        - currency
        - status
        - providerAdditionalInfo
      additionalProperties: false
      properties:
        provider:
          type: string
          enum: [stripe, paypal, square, braintree, adyen, authorize_net]
          description: Payment provider handling this transaction
          example: stripe
        amount:
          type: number
          format: float
          minimum: 0
          description: Payment amount
          example: 299.99
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Payment currency
          example: USD
        status:
          type: string
          enum: [created, requires_payment, requires_confirmation, processing, succeeded, failed, cancelled]
          description: Generic payment status
          example: requires_payment
        expiresAt:
          type: string
          format: date-time
          description: When this payment expires
          example: "2024-01-24T11:30:00Z"
        providerAdditionalInfo:
          $ref: '#/components/schemas/ProviderAdditionalInfo'

    ProviderAdditionalInfo:
      type: object
      description: Provider-specific fields composition for all payment providers
      additionalProperties: false
      properties:
        # Stripe-specific fields (when provider = 'stripe')
        paymentIntentId:
          type: string
          description: Stripe Payment Intent ID
          example: pi_3MqxDr2eZvKYlo2C0J8yQZ7P
        clientSecret:
          type: string
          description: Stripe client secret for payment confirmation
          example: pi_3MqxDr2eZvKYlo2C0J8yQZ7P_secret_abc123def456
        publishableKey:
          type: string
          description: Stripe publishable key for SDK initialization
          example: pk_test_abc123def456

        # PayPal-specific fields (when provider = 'paypal')
        orderId:
          type: string
          description: PayPal Order ID
          example: 8XH12345678901234
        approvalUrl:
          type: string
          format: uri
          description: PayPal approval URL for checkout
          example: https://www.paypal.com/checkoutnow?token=8XH12345678901234
        accessToken:
          type: string
          description: PayPal access token
          example: A21AALcE7XFh9dGrR8...

        # Square-specific fields (when provider = 'square')
        locationId:
          type: string
          description: Square location ID
          example: L123456789
        applicationId:
          type: string
          description: Square application ID
          example: sq0app-abc123def456
        nonce:
          type: string
          description: Square payment nonce
          example: cnon_abc123def456

        # Braintree-specific fields (when provider = 'braintree')
        clientToken:
          type: string
          description: Braintree client token
          example: eyJ2ZXJzaW9uIjoyLCJhdXRob3JpemF0aW9uRmluZ2VycHJpbnQi...
        merchantId:
          type: string
          description: Braintree merchant ID
          example: abc123def456

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      additionalProperties: false
      properties:
        error:
          type: string
          description: Error code or type
          example: INVALID_PAYMENT_STATUS_TRANSITION
        message:
          type: string
          description: Human-readable error message
          example: Cannot change payment status from 'succeeded' to 'requires_payment'
        details:
          type: string
          description: Additional error details
        timestamp:
          $ref: '#/components/schemas/Timestamp'


    # Shipping Response Schemas
    ShippingInfo:
      type: object
      description: Core shipping information for order fulfillment
      required:
        - carrier
        - service
        - status
        - providerAdditionalInfo
      additionalProperties: false
      properties:
        carrier:
          type: string
          enum: [ups, fedex, dhl, usps, amazon_logistics, local_courier, pickup]
          description: Shipping carrier handling this shipment
          example: ups
        service:
          type: string
          description: Shipping service level
          example: ground
        status:
          type: string
          enum: [pending, processing, shipped, in_transit, delivered, failed, returned]
          description: Current shipping status
          example: shipped
        estimatedDelivery:
          type: string
          format: date-time
          description: Estimated delivery date
          example: "2024-01-25T18:00:00Z"
        shippedAt:
          type: string
          format: date-time
          description: When the order was shipped
          example: "2024-01-23T14:30:00Z"
        deliveredAt:
          type: string
          format: date-time
          description: When the order was delivered
          example: "2024-01-25T16:45:00Z"
        providerAdditionalInfo:
          $ref: '#/components/schemas/ShippingProviderAdditionalInfo'

    ShippingProviderAdditionalInfo:
      type: object
      description: Provider-specific fields composition for all shipping carriers
      additionalProperties: false
      properties:
        # Generic fields (available for all carriers)
        trackingNumber:
          type: string
          description: Generic tracking number (most common field across all carriers)
          example: "1Z999AA1234567890"
        trackingUrl:
          type: string
          format: uri
          description: Direct URL to track the package
          example: "https://www.ups.com/track?TrackingNumber=1Z999AA1234567890"
        carrierServiceName:
          type: string
          description: Human-readable service name
          example: "UPS Ground"
        carrierServiceCode:
          type: string
          description: Carrier's internal service code
          example: "03"
        labelUrl:
          type: string
          format: uri
          description: URL to shipping label PDF
          example: "https://api.carrier.com/labels/12345.pdf"
        weight:
          type: number
          format: float
          description: Package weight in pounds
          example: 2.5
        dimensions:
          type: object
          description: Package dimensions
          properties:
            length:
              type: number
              format: float
              example: 12.0
            width:
              type: number
              format: float
              example: 8.0
            height:
              type: number
              format: float
              example: 4.0
            unit:
              type: string
              enum: [in, cm]
              example: "in"
        insuranceValue:
          type: number
          format: float
          description: Insurance value in USD
          example: 200.00
        signatureRequired:
          type: boolean
          description: Whether signature is required for delivery
          example: false

        # UPS-specific fields (when carrier = 'ups')
        upsTrackingNumber:
          type: string
          description: UPS tracking number
          example: 1Z999AA1234567890
        upsServiceCode:
          type: string
          description: UPS service code
          example: "03"

        # FedEx-specific fields (when carrier = 'fedex')
        fedexTrackingNumber:
          type: string
          description: FedEx tracking number
          example: "1234567890123456"
        fedexServiceType:
          type: string
          description: FedEx service type
          example: FEDEX_GROUND

        # USPS-specific fields (when carrier = 'usps')
        uspsTrackingNumber:
          type: string
          description: USPS tracking number
          example: "9400111899562537338756"
        uspsMailClass:
          type: string
          description: USPS mail class
          example: PRIORITY_MAIL

        # DHL-specific fields (when carrier = 'dhl')
        dhlTrackingNumber:
          type: string
          description: DHL tracking number
          example: "1234567890"
        dhlProductCode:
          type: string
          description: DHL product code
          example: "N"

        # Amazon Logistics-specific fields (when carrier = 'amazon_logistics')
        amazonTrackingId:
          type: string
          description: Amazon tracking ID
          example: TBA123456789000

        # Local courier-specific fields (when carrier = 'local_courier')
        courierName:
          type: string
          description: Local courier company name
          example: City Express Delivery
        courierPhoneNumber:
          type: string
          description: Courier contact number
          example: "+1-555-0123"